                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _music
                                     12 	.globl _main
                                     13 	.globl _init
                                     14 	.globl _timer1
                                     15 	.globl _timer_isr
                                     16 	.globl _CY
                                     17 	.globl _AC
                                     18 	.globl _F0
                                     19 	.globl _RS1
                                     20 	.globl _RS0
                                     21 	.globl _OV
                                     22 	.globl _F1
                                     23 	.globl _P
                                     24 	.globl _PS
                                     25 	.globl _PT1
                                     26 	.globl _PX1
                                     27 	.globl _PT0
                                     28 	.globl _PX0
                                     29 	.globl _RD
                                     30 	.globl _WR
                                     31 	.globl _T1
                                     32 	.globl _T0
                                     33 	.globl _INT1
                                     34 	.globl _INT0
                                     35 	.globl _TXD
                                     36 	.globl _RXD
                                     37 	.globl _P3_7
                                     38 	.globl _P3_6
                                     39 	.globl _P3_5
                                     40 	.globl _P3_4
                                     41 	.globl _P3_3
                                     42 	.globl _P3_2
                                     43 	.globl _P3_1
                                     44 	.globl _P3_0
                                     45 	.globl _EA
                                     46 	.globl _ES
                                     47 	.globl _ET1
                                     48 	.globl _EX1
                                     49 	.globl _ET0
                                     50 	.globl _EX0
                                     51 	.globl _P2_7
                                     52 	.globl _P2_6
                                     53 	.globl _P2_5
                                     54 	.globl _P2_4
                                     55 	.globl _P2_3
                                     56 	.globl _P2_2
                                     57 	.globl _P2_1
                                     58 	.globl _P2_0
                                     59 	.globl _SM0
                                     60 	.globl _SM1
                                     61 	.globl _SM2
                                     62 	.globl _REN
                                     63 	.globl _TB8
                                     64 	.globl _RB8
                                     65 	.globl _TI
                                     66 	.globl _RI
                                     67 	.globl _P1_7
                                     68 	.globl _P1_6
                                     69 	.globl _P1_5
                                     70 	.globl _P1_4
                                     71 	.globl _P1_3
                                     72 	.globl _P1_2
                                     73 	.globl _P1_1
                                     74 	.globl _P1_0
                                     75 	.globl _TF1
                                     76 	.globl _TR1
                                     77 	.globl _TF0
                                     78 	.globl _TR0
                                     79 	.globl _IE1
                                     80 	.globl _IT1
                                     81 	.globl _IE0
                                     82 	.globl _IT0
                                     83 	.globl _P0_7
                                     84 	.globl _P0_6
                                     85 	.globl _P0_5
                                     86 	.globl _P0_4
                                     87 	.globl _P0_3
                                     88 	.globl _P0_2
                                     89 	.globl _P0_1
                                     90 	.globl _P0_0
                                     91 	.globl _B
                                     92 	.globl _ACC
                                     93 	.globl _PSW
                                     94 	.globl _IP
                                     95 	.globl _P3
                                     96 	.globl _IE
                                     97 	.globl _P2
                                     98 	.globl _SBUF
                                     99 	.globl _SCON
                                    100 	.globl _P1
                                    101 	.globl _TH1
                                    102 	.globl _TH0
                                    103 	.globl _TL1
                                    104 	.globl _TL0
                                    105 	.globl _TMOD
                                    106 	.globl _TCON
                                    107 	.globl _PCON
                                    108 	.globl _DPH
                                    109 	.globl _DPL
                                    110 	.globl _SP
                                    111 	.globl _P0
                                    112 	.globl _table_index
                                    113 	.globl _counter
                                    114 	.globl _table
                                    115 	.globl _isSound
                                    116 	.globl _music_index
                                    117 	.globl _timer1_count
                                    118 ;--------------------------------------------------------
                                    119 ; special function registers
                                    120 ;--------------------------------------------------------
                                    121 	.area RSEG    (ABS,DATA)
      000000                        122 	.org 0x0000
                           000080   123 _P0	=	0x0080
                           000081   124 _SP	=	0x0081
                           000082   125 _DPL	=	0x0082
                           000083   126 _DPH	=	0x0083
                           000087   127 _PCON	=	0x0087
                           000088   128 _TCON	=	0x0088
                           000089   129 _TMOD	=	0x0089
                           00008A   130 _TL0	=	0x008a
                           00008B   131 _TL1	=	0x008b
                           00008C   132 _TH0	=	0x008c
                           00008D   133 _TH1	=	0x008d
                           000090   134 _P1	=	0x0090
                           000098   135 _SCON	=	0x0098
                           000099   136 _SBUF	=	0x0099
                           0000A0   137 _P2	=	0x00a0
                           0000A8   138 _IE	=	0x00a8
                           0000B0   139 _P3	=	0x00b0
                           0000B8   140 _IP	=	0x00b8
                           0000D0   141 _PSW	=	0x00d0
                           0000E0   142 _ACC	=	0x00e0
                           0000F0   143 _B	=	0x00f0
                                    144 ;--------------------------------------------------------
                                    145 ; special function bits
                                    146 ;--------------------------------------------------------
                                    147 	.area RSEG    (ABS,DATA)
      000000                        148 	.org 0x0000
                           000080   149 _P0_0	=	0x0080
                           000081   150 _P0_1	=	0x0081
                           000082   151 _P0_2	=	0x0082
                           000083   152 _P0_3	=	0x0083
                           000084   153 _P0_4	=	0x0084
                           000085   154 _P0_5	=	0x0085
                           000086   155 _P0_6	=	0x0086
                           000087   156 _P0_7	=	0x0087
                           000088   157 _IT0	=	0x0088
                           000089   158 _IE0	=	0x0089
                           00008A   159 _IT1	=	0x008a
                           00008B   160 _IE1	=	0x008b
                           00008C   161 _TR0	=	0x008c
                           00008D   162 _TF0	=	0x008d
                           00008E   163 _TR1	=	0x008e
                           00008F   164 _TF1	=	0x008f
                           000090   165 _P1_0	=	0x0090
                           000091   166 _P1_1	=	0x0091
                           000092   167 _P1_2	=	0x0092
                           000093   168 _P1_3	=	0x0093
                           000094   169 _P1_4	=	0x0094
                           000095   170 _P1_5	=	0x0095
                           000096   171 _P1_6	=	0x0096
                           000097   172 _P1_7	=	0x0097
                           000098   173 _RI	=	0x0098
                           000099   174 _TI	=	0x0099
                           00009A   175 _RB8	=	0x009a
                           00009B   176 _TB8	=	0x009b
                           00009C   177 _REN	=	0x009c
                           00009D   178 _SM2	=	0x009d
                           00009E   179 _SM1	=	0x009e
                           00009F   180 _SM0	=	0x009f
                           0000A0   181 _P2_0	=	0x00a0
                           0000A1   182 _P2_1	=	0x00a1
                           0000A2   183 _P2_2	=	0x00a2
                           0000A3   184 _P2_3	=	0x00a3
                           0000A4   185 _P2_4	=	0x00a4
                           0000A5   186 _P2_5	=	0x00a5
                           0000A6   187 _P2_6	=	0x00a6
                           0000A7   188 _P2_7	=	0x00a7
                           0000A8   189 _EX0	=	0x00a8
                           0000A9   190 _ET0	=	0x00a9
                           0000AA   191 _EX1	=	0x00aa
                           0000AB   192 _ET1	=	0x00ab
                           0000AC   193 _ES	=	0x00ac
                           0000AF   194 _EA	=	0x00af
                           0000B0   195 _P3_0	=	0x00b0
                           0000B1   196 _P3_1	=	0x00b1
                           0000B2   197 _P3_2	=	0x00b2
                           0000B3   198 _P3_3	=	0x00b3
                           0000B4   199 _P3_4	=	0x00b4
                           0000B5   200 _P3_5	=	0x00b5
                           0000B6   201 _P3_6	=	0x00b6
                           0000B7   202 _P3_7	=	0x00b7
                           0000B0   203 _RXD	=	0x00b0
                           0000B1   204 _TXD	=	0x00b1
                           0000B2   205 _INT0	=	0x00b2
                           0000B3   206 _INT1	=	0x00b3
                           0000B4   207 _T0	=	0x00b4
                           0000B5   208 _T1	=	0x00b5
                           0000B6   209 _WR	=	0x00b6
                           0000B7   210 _RD	=	0x00b7
                           0000B8   211 _PX0	=	0x00b8
                           0000B9   212 _PT0	=	0x00b9
                           0000BA   213 _PX1	=	0x00ba
                           0000BB   214 _PT1	=	0x00bb
                           0000BC   215 _PS	=	0x00bc
                           0000D0   216 _P	=	0x00d0
                           0000D1   217 _F1	=	0x00d1
                           0000D2   218 _OV	=	0x00d2
                           0000D3   219 _RS0	=	0x00d3
                           0000D4   220 _RS1	=	0x00d4
                           0000D5   221 _F0	=	0x00d5
                           0000D6   222 _AC	=	0x00d6
                           0000D7   223 _CY	=	0x00d7
                                    224 ;--------------------------------------------------------
                                    225 ; overlayable register banks
                                    226 ;--------------------------------------------------------
                                    227 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        228 	.ds 8
                                    229 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        230 	.ds 8
                                    231 	.area REG_BANK_2	(REL,OVR,DATA)
      000000                        232 	.ds 8
                                    233 ;--------------------------------------------------------
                                    234 ; internal ram data
                                    235 ;--------------------------------------------------------
                                    236 	.area DSEG    (DATA)
      000000                        237 _timer1_count::
      000000                        238 	.ds 2
      000002                        239 _music_index::
      000002                        240 	.ds 1
      000003                        241 _isSound::
      000003                        242 	.ds 2
      000005                        243 _table::
      000005                        244 	.ds 32
      000025                        245 _counter::
      000025                        246 	.ds 1
      000026                        247 _table_index::
      000026                        248 	.ds 1
                                    249 ;--------------------------------------------------------
                                    250 ; overlayable items in internal ram 
                                    251 ;--------------------------------------------------------
                                    252 ;--------------------------------------------------------
                                    253 ; Stack segment in internal ram 
                                    254 ;--------------------------------------------------------
                                    255 	.area	SSEG
      000000                        256 __start__stack:
      000000                        257 	.ds	1
                                    258 
                                    259 ;--------------------------------------------------------
                                    260 ; indirectly addressable internal ram data
                                    261 ;--------------------------------------------------------
                                    262 	.area ISEG    (DATA)
                                    263 ;--------------------------------------------------------
                                    264 ; absolute internal ram data
                                    265 ;--------------------------------------------------------
                                    266 	.area IABS    (ABS,DATA)
                                    267 	.area IABS    (ABS,DATA)
                                    268 ;--------------------------------------------------------
                                    269 ; bit data
                                    270 ;--------------------------------------------------------
                                    271 	.area BSEG    (BIT)
                                    272 ;--------------------------------------------------------
                                    273 ; paged external ram data
                                    274 ;--------------------------------------------------------
                                    275 	.area PSEG    (PAG,XDATA)
                                    276 ;--------------------------------------------------------
                                    277 ; external ram data
                                    278 ;--------------------------------------------------------
                                    279 	.area XSEG    (XDATA)
                                    280 ;--------------------------------------------------------
                                    281 ; absolute external ram data
                                    282 ;--------------------------------------------------------
                                    283 	.area XABS    (ABS,XDATA)
                                    284 ;--------------------------------------------------------
                                    285 ; external initialized ram data
                                    286 ;--------------------------------------------------------
                                    287 	.area XISEG   (XDATA)
                                    288 	.area HOME    (CODE)
                                    289 	.area GSINIT0 (CODE)
                                    290 	.area GSINIT1 (CODE)
                                    291 	.area GSINIT2 (CODE)
                                    292 	.area GSINIT3 (CODE)
                                    293 	.area GSINIT4 (CODE)
                                    294 	.area GSINIT5 (CODE)
                                    295 	.area GSINIT  (CODE)
                                    296 	.area GSFINAL (CODE)
                                    297 	.area CSEG    (CODE)
                                    298 ;--------------------------------------------------------
                                    299 ; interrupt vector 
                                    300 ;--------------------------------------------------------
                                    301 	.area HOME    (CODE)
      000000                        302 __interrupt_vect:
      000000 02r00r00         [24]  303 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  304 	reti
      000004                        305 	.ds	7
      00000B 02r00r00         [24]  306 	ljmp	_timer_isr
      00000E                        307 	.ds	5
      000013 32               [24]  308 	reti
      000014                        309 	.ds	7
      00001B 02r00r42         [24]  310 	ljmp	_timer1
                                    311 ;--------------------------------------------------------
                                    312 ; global & static initialisations
                                    313 ;--------------------------------------------------------
                                    314 	.area HOME    (CODE)
                                    315 	.area GSINIT  (CODE)
                                    316 	.area GSFINAL (CODE)
                                    317 	.area GSINIT  (CODE)
                                    318 	.globl __sdcc_gsinit_startup
                                    319 	.globl __sdcc_program_startup
                                    320 	.globl __start__stack
                                    321 	.globl __mcs51_genXINIT
                                    322 	.globl __mcs51_genXRAMCLEAR
                                    323 	.globl __mcs51_genRAMCLEAR
                                    324 ;	main.c:9: int table[16] = {262, 294, 330, 349, 392, 440, 494};
      000000 75*05 06         [24]  325 	mov	(_table + 0),#0x06
      000003 75*06 01         [24]  326 	mov	(_table + 1),#0x01
      000006 75*07 26         [24]  327 	mov	((_table + 0x0002) + 0),#0x26
      000009 75*08 01         [24]  328 	mov	((_table + 0x0002) + 1),#0x01
      00000C 75*09 4A         [24]  329 	mov	((_table + 0x0004) + 0),#0x4a
      00000F 75*0A 01         [24]  330 	mov	((_table + 0x0004) + 1),#0x01
      000012 75*0B 5D         [24]  331 	mov	((_table + 0x0006) + 0),#0x5d
      000015 75*0C 01         [24]  332 	mov	((_table + 0x0006) + 1),#0x01
      000018 75*0D 88         [24]  333 	mov	((_table + 0x0008) + 0),#0x88
      00001B 75*0E 01         [24]  334 	mov	((_table + 0x0008) + 1),#0x01
      00001E 75*0F B8         [24]  335 	mov	((_table + 0x000a) + 0),#0xb8
      000021 75*10 01         [24]  336 	mov	((_table + 0x000a) + 1),#0x01
      000024 75*11 EE         [24]  337 	mov	((_table + 0x000c) + 0),#0xee
      000027 75*12 01         [24]  338 	mov	((_table + 0x000c) + 1),#0x01
                                    339 ;	main.c:16: char counter = 0;
      00002A 75*25 00         [24]  340 	mov	_counter,#0x00
                                    341 ;	main.c:17: char table_index=0;
      00002D 75*26 00         [24]  342 	mov	_table_index,#0x00
                                    343 	.area GSFINAL (CODE)
      000000 02r00r1E         [24]  344 	ljmp	__sdcc_program_startup
                                    345 ;--------------------------------------------------------
                                    346 ; Home
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
                                    349 	.area HOME    (CODE)
      00001E                        350 __sdcc_program_startup:
      00001E 02r01r2E         [24]  351 	ljmp	_main
                                    352 ;	return from main will return to caller
                                    353 ;--------------------------------------------------------
                                    354 ; code
                                    355 ;--------------------------------------------------------
                                    356 	.area CSEG    (CODE)
                                    357 ;------------------------------------------------------------
                                    358 ;Allocation info for local variables in function 'timer_isr'
                                    359 ;------------------------------------------------------------
                                    360 ;	main.c:19: void timer_isr (void) __interrupt (1) __using (1) {
                                    361 ;	-----------------------------------------
                                    362 ;	 function timer_isr
                                    363 ;	-----------------------------------------
      000000                        364 _timer_isr:
                           00000F   365 	ar7 = 0x0f
                           00000E   366 	ar6 = 0x0e
                           00000D   367 	ar5 = 0x0d
                           00000C   368 	ar4 = 0x0c
                           00000B   369 	ar3 = 0x0b
                           00000A   370 	ar2 = 0x0a
                           000009   371 	ar1 = 0x09
                           000008   372 	ar0 = 0x08
      000000 C0 E0            [24]  373 	push	acc
      000002 C0 82            [24]  374 	push	dpl
      000004 C0 83            [24]  375 	push	dph
      000006 C0 D0            [24]  376 	push	psw
      000008 75 D0 08         [24]  377 	mov	psw,#0x08
                                    378 ;	main.c:21: TH0  = (PERIOD-table[music[music_index]]) >> 8;
      00000B E5*02            [12]  379 	mov	a,_music_index
      00000D 90r00r00         [24]  380 	mov	dptr,#_music
      000010 93               [24]  381 	movc	a,@a+dptr
      000011 25 E0            [12]  382 	add	a,acc
      000013 24r05            [12]  383 	add	a,#_table
      000015 F9               [12]  384 	mov	r1,a
      000016 87 0E            [24]  385 	mov	ar6,@r1
      000018 09               [12]  386 	inc	r1
      000019 87 0F            [24]  387 	mov	ar7,@r1
      00001B 8E 0A            [24]  388 	mov	ar2,r6
      00001D EF               [12]  389 	mov	a,r7
      00001E FB               [12]  390 	mov	r3,a
      00001F 33               [12]  391 	rlc	a
      000020 95 E0            [12]  392 	subb	a,acc
      000022 FC               [12]  393 	mov	r4,a
      000023 FD               [12]  394 	mov	r5,a
      000024 E4               [12]  395 	clr	a
      000025 C3               [12]  396 	clr	c
      000026 9A               [12]  397 	subb	a,r2
      000027 E4               [12]  398 	clr	a
      000028 9B               [12]  399 	subb	a,r3
      000029 FB               [12]  400 	mov	r3,a
      00002A 74 01            [12]  401 	mov	a,#0x01
      00002C 9C               [12]  402 	subb	a,r4
      00002D E4               [12]  403 	clr	a
      00002E 9D               [12]  404 	subb	a,r5
      00002F 8B 8C            [24]  405 	mov	_TH0,r3
                                    406 ;	main.c:22: TL0  = (PERIOD-table[music[music_index]]) & 0xff;
      000031 C3               [12]  407 	clr	c
      000032 E4               [12]  408 	clr	a
      000033 9E               [12]  409 	subb	a,r6
      000034 FE               [12]  410 	mov	r6,a
      000035 8E 8A            [24]  411 	mov	_TL0,r6
                                    412 ;	main.c:26: counter++;
      000037 05*25            [12]  413 	inc	_counter
                                    414 ;	main.c:27: }
      000039 D0 D0            [24]  415 	pop	psw
      00003B D0 83            [24]  416 	pop	dph
      00003D D0 82            [24]  417 	pop	dpl
      00003F D0 E0            [24]  418 	pop	acc
      000041 32               [24]  419 	reti
                                    420 ;	eliminated unneeded push/pop b
                                    421 ;------------------------------------------------------------
                                    422 ;Allocation info for local variables in function 'timer1'
                                    423 ;------------------------------------------------------------
                                    424 ;	main.c:29: void timer1 (void) __interrupt (3) __using (2) {
                                    425 ;	-----------------------------------------
                                    426 ;	 function timer1
                                    427 ;	-----------------------------------------
      000042                        428 _timer1:
                           000017   429 	ar7 = 0x17
                           000016   430 	ar6 = 0x16
                           000015   431 	ar5 = 0x15
                           000014   432 	ar4 = 0x14
                           000013   433 	ar3 = 0x13
                           000012   434 	ar2 = 0x12
                           000011   435 	ar1 = 0x11
                           000010   436 	ar0 = 0x10
      000042 C0 E0            [24]  437 	push	acc
      000044 C0 D0            [24]  438 	push	psw
                                    439 ;	main.c:30: TH1  = INIT_TIME >> 8;
      000046 75 8D 0B         [24]  440 	mov	_TH1,#0x0b
                                    441 ;	main.c:31: TL1  = INIT_TIME & 0xff;
      000049 75 8B DC         [24]  442 	mov	_TL1,#0xdc
                                    443 ;	main.c:32: timer1_count++;
      00004C 05*00            [12]  444 	inc	_timer1_count
      00004E E4               [12]  445 	clr	a
      00004F B5*00 02         [24]  446 	cjne	a,_timer1_count,00103$
      000052 05*01            [12]  447 	inc	(_timer1_count + 1)
      000054                        448 00103$:
                                    449 ;	main.c:33: }
      000054 D0 D0            [24]  450 	pop	psw
      000056 D0 E0            [24]  451 	pop	acc
      000058 32               [24]  452 	reti
                                    453 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    454 ;	eliminated unneeded push/pop dpl
                                    455 ;	eliminated unneeded push/pop dph
                                    456 ;	eliminated unneeded push/pop b
                                    457 ;------------------------------------------------------------
                                    458 ;Allocation info for local variables in function 'init'
                                    459 ;------------------------------------------------------------
                                    460 ;tmp                       Allocated to registers r2 r3 r4 r5 
                                    461 ;i                         Allocated to registers r6 r7 
                                    462 ;i                         Allocated to registers r6 r7 
                                    463 ;------------------------------------------------------------
                                    464 ;	main.c:35: void init(){
                                    465 ;	-----------------------------------------
                                    466 ;	 function init
                                    467 ;	-----------------------------------------
      000059                        468 _init:
                           000007   469 	ar7 = 0x07
                           000006   470 	ar6 = 0x06
                           000005   471 	ar5 = 0x05
                           000004   472 	ar4 = 0x04
                           000003   473 	ar3 = 0x03
                           000002   474 	ar2 = 0x02
                           000001   475 	ar1 = 0x01
                           000000   476 	ar0 = 0x00
                                    477 ;	main.c:36: music_index=0;
      000059 75*02 00         [24]  478 	mov	_music_index,#0x00
                                    479 ;	main.c:37: timer1_count=-1;
      00005C 75*00 FF         [24]  480 	mov	_timer1_count,#0xff
      00005F 75*01 FF         [24]  481 	mov	(_timer1_count + 1),#0xff
                                    482 ;	main.c:39: for(int i=7;i<16;i++){
      000062 7E 07            [12]  483 	mov	r6,#0x07
      000064 7F 00            [12]  484 	mov	r7,#0x00
      000066                        485 00104$:
      000066 C3               [12]  486 	clr	c
      000067 EE               [12]  487 	mov	a,r6
      000068 94 10            [12]  488 	subb	a,#0x10
      00006A EF               [12]  489 	mov	a,r7
      00006B 64 80            [12]  490 	xrl	a,#0x80
      00006D 94 80            [12]  491 	subb	a,#0x80
      00006F 50 2C            [24]  492 	jnc	00101$
                                    493 ;	main.c:40: table[i]=table[i-7]*2;
      000071 EE               [12]  494 	mov	a,r6
      000072 2E               [12]  495 	add	a,r6
      000073 FC               [12]  496 	mov	r4,a
      000074 EF               [12]  497 	mov	a,r7
      000075 33               [12]  498 	rlc	a
      000076 EC               [12]  499 	mov	a,r4
      000077 24r05            [12]  500 	add	a,#_table
      000079 F9               [12]  501 	mov	r1,a
      00007A 8E 05            [24]  502 	mov	ar5,r6
      00007C ED               [12]  503 	mov	a,r5
      00007D 24 F9            [12]  504 	add	a,#0xf9
      00007F 25 E0            [12]  505 	add	a,acc
      000081 24r05            [12]  506 	add	a,#_table
      000083 F8               [12]  507 	mov	r0,a
      000084 86 04            [24]  508 	mov	ar4,@r0
      000086 08               [12]  509 	inc	r0
      000087 86 05            [24]  510 	mov	ar5,@r0
      000089 18               [12]  511 	dec	r0
      00008A EC               [12]  512 	mov	a,r4
      00008B 2C               [12]  513 	add	a,r4
      00008C FC               [12]  514 	mov	r4,a
      00008D ED               [12]  515 	mov	a,r5
      00008E 33               [12]  516 	rlc	a
      00008F FD               [12]  517 	mov	r5,a
      000090 A7 04            [24]  518 	mov	@r1,ar4
      000092 09               [12]  519 	inc	r1
      000093 A7 05            [24]  520 	mov	@r1,ar5
      000095 19               [12]  521 	dec	r1
                                    522 ;	main.c:39: for(int i=7;i<16;i++){
      000096 0E               [12]  523 	inc	r6
      000097 BE 00 CC         [24]  524 	cjne	r6,#0x00,00104$
      00009A 0F               [12]  525 	inc	r7
      00009B 80 C9            [24]  526 	sjmp	00104$
      00009D                        527 00101$:
                                    528 ;	main.c:42: for(int i=0;i<16;i++){
      00009D 7E 00            [12]  529 	mov	r6,#0x00
      00009F 7F 00            [12]  530 	mov	r7,#0x00
      0000A1                        531 00107$:
      0000A1 C3               [12]  532 	clr	c
      0000A2 EE               [12]  533 	mov	a,r6
      0000A3 94 10            [12]  534 	subb	a,#0x10
      0000A5 EF               [12]  535 	mov	a,r7
      0000A6 64 80            [12]  536 	xrl	a,#0x80
      0000A8 94 80            [12]  537 	subb	a,#0x80
      0000AA 40 01            [24]  538 	jc	00131$
      0000AC 22               [24]  539 	ret
      0000AD                        540 00131$:
                                    541 ;	main.c:43: tmp=1.0/table[i]*1000000;
      0000AD EE               [12]  542 	mov	a,r6
      0000AE 2E               [12]  543 	add	a,r6
      0000AF FC               [12]  544 	mov	r4,a
      0000B0 EF               [12]  545 	mov	a,r7
      0000B1 33               [12]  546 	rlc	a
      0000B2 EC               [12]  547 	mov	a,r4
      0000B3 24r05            [12]  548 	add	a,#_table
      0000B5 F9               [12]  549 	mov	r1,a
      0000B6 87 82            [24]  550 	mov	dpl,@r1
      0000B8 09               [12]  551 	inc	r1
      0000B9 87 83            [24]  552 	mov	dph,@r1
      0000BB 19               [12]  553 	dec	r1
      0000BC C0 07            [24]  554 	push	ar7
      0000BE C0 06            [24]  555 	push	ar6
      0000C0 C0 01            [24]  556 	push	ar1
      0000C2 12r00r00         [24]  557 	lcall	___sint2fs
      0000C5 AA 82            [24]  558 	mov	r2,dpl
      0000C7 AB 83            [24]  559 	mov	r3,dph
      0000C9 AC F0            [24]  560 	mov	r4,b
      0000CB FD               [12]  561 	mov	r5,a
      0000CC C0 02            [24]  562 	push	ar2
      0000CE C0 03            [24]  563 	push	ar3
      0000D0 C0 04            [24]  564 	push	ar4
      0000D2 C0 05            [24]  565 	push	ar5
      0000D4 90 00 00         [24]  566 	mov	dptr,#0x0000
      0000D7 75 F0 80         [24]  567 	mov	b,#0x80
      0000DA 74 3F            [12]  568 	mov	a,#0x3f
      0000DC 12r00r00         [24]  569 	lcall	___fsdiv
      0000DF AA 82            [24]  570 	mov	r2,dpl
      0000E1 AB 83            [24]  571 	mov	r3,dph
      0000E3 AC F0            [24]  572 	mov	r4,b
      0000E5 FD               [12]  573 	mov	r5,a
      0000E6 E5 81            [12]  574 	mov	a,sp
      0000E8 24 FC            [12]  575 	add	a,#0xfc
      0000EA F5 81            [12]  576 	mov	sp,a
      0000EC C0 02            [24]  577 	push	ar2
      0000EE C0 03            [24]  578 	push	ar3
      0000F0 C0 04            [24]  579 	push	ar4
      0000F2 C0 05            [24]  580 	push	ar5
      0000F4 90 24 00         [24]  581 	mov	dptr,#0x2400
      0000F7 75 F0 74         [24]  582 	mov	b,#0x74
      0000FA 74 49            [12]  583 	mov	a,#0x49
      0000FC 12r00r00         [24]  584 	lcall	___fsmul
      0000FF AA 82            [24]  585 	mov	r2,dpl
      000101 AB 83            [24]  586 	mov	r3,dph
      000103 AC F0            [24]  587 	mov	r4,b
      000105 FD               [12]  588 	mov	r5,a
      000106 E5 81            [12]  589 	mov	a,sp
      000108 24 FC            [12]  590 	add	a,#0xfc
      00010A F5 81            [12]  591 	mov	sp,a
                                    592 ;	main.c:44: table[i]=tmp;
      00010C 8A 82            [24]  593 	mov	dpl,r2
      00010E 8B 83            [24]  594 	mov	dph,r3
      000110 8C F0            [24]  595 	mov	b,r4
      000112 ED               [12]  596 	mov	a,r5
      000113 12r00r00         [24]  597 	lcall	___fs2sint
      000116 E5 82            [12]  598 	mov	a,dpl
      000118 85 83 F0         [24]  599 	mov	b,dph
      00011B D0 01            [24]  600 	pop	ar1
      00011D D0 06            [24]  601 	pop	ar6
      00011F D0 07            [24]  602 	pop	ar7
      000121 F7               [12]  603 	mov	@r1,a
      000122 09               [12]  604 	inc	r1
      000123 A7 F0            [24]  605 	mov	@r1,b
      000125 19               [12]  606 	dec	r1
                                    607 ;	main.c:42: for(int i=0;i<16;i++){
      000126 0E               [12]  608 	inc	r6
      000127 BE 00 01         [24]  609 	cjne	r6,#0x00,00132$
      00012A 0F               [12]  610 	inc	r7
      00012B                        611 00132$:
                                    612 ;	main.c:46: }
      00012B 02r00rA1         [24]  613 	ljmp	00107$
                                    614 ;------------------------------------------------------------
                                    615 ;Allocation info for local variables in function 'main'
                                    616 ;------------------------------------------------------------
                                    617 ;	main.c:47: int main(){
                                    618 ;	-----------------------------------------
                                    619 ;	 function main
                                    620 ;	-----------------------------------------
      00012E                        621 _main:
                                    622 ;	main.c:48: init();
      00012E 12r00r59         [24]  623 	lcall	_init
                                    624 ;	main.c:49: TMOD = 0b00010001;
      000131 75 89 11         [24]  625 	mov	_TMOD,#0x11
                                    626 ;	main.c:50: IE   = 0x8A;
      000134 75 A8 8A         [24]  627 	mov	_IE,#0x8a
                                    628 ;	main.c:51: TR0  = 1;
                                    629 ;	assignBit
      000137 D2 8C            [12]  630 	setb	_TR0
                                    631 ;	main.c:52: TR1  = 1;
                                    632 ;	assignBit
      000139 D2 8E            [12]  633 	setb	_TR1
                                    634 ;	main.c:53: TH0  = PERIOD >> 8;
      00013B 75 8C 00         [24]  635 	mov	_TH0,#0x00
                                    636 ;	main.c:54: TL0  = PERIOD & 0xff;
      00013E 75 8A 00         [24]  637 	mov	_TL0,#0x00
                                    638 ;	main.c:55: P2_7=0;
                                    639 ;	assignBit
      000141 C2 A7            [12]  640 	clr	_P2_7
                                    641 ;	main.c:56: isSound=1;
      000143 75*03 01         [24]  642 	mov	_isSound,#0x01
      000146 75*04 00         [24]  643 	mov	(_isSound + 1),#0x00
                                    644 ;	main.c:57: while (1){
      000149                        645 00108$:
                                    646 ;	main.c:58: EA = 0;
                                    647 ;	assignBit
      000149 C2 AF            [12]  648 	clr	_EA
                                    649 ;	main.c:59: if (counter == 1) {
      00014B 74 01            [12]  650 	mov	a,#0x01
      00014D B5*25 05         [24]  651 	cjne	a,_counter,00102$
                                    652 ;	main.c:60: counter = 0;
      000150 75*25 00         [24]  653 	mov	_counter,#0x00
                                    654 ;	main.c:61: P2_7=!P2_7;
      000153 B2 A7            [12]  655 	cpl	_P2_7
      000155                        656 00102$:
                                    657 ;	main.c:63: if(timer1_count == 10){
      000155 74 0A            [12]  658 	mov	a,#0x0a
      000157 B5*00 06         [24]  659 	cjne	a,_timer1_count,00130$
      00015A E4               [12]  660 	clr	a
      00015B B5*01 02         [24]  661 	cjne	a,(_timer1_count + 1),00130$
      00015E 80 02            [24]  662 	sjmp	00131$
      000160                        663 00130$:
      000160 80 0F            [24]  664 	sjmp	00106$
      000162                        665 00131$:
                                    666 ;	main.c:76: music_index++;
      000162 05*02            [12]  667 	inc	_music_index
                                    668 ;	main.c:77: timer1_count=0;
      000164 E4               [12]  669 	clr	a
      000165 F5*00            [12]  670 	mov	_timer1_count,a
      000167 F5*01            [12]  671 	mov	(_timer1_count + 1),a
                                    672 ;	main.c:78: if(music_index == 96)
      000169 74 60            [12]  673 	mov	a,#0x60
      00016B B5*02 03         [24]  674 	cjne	a,_music_index,00106$
                                    675 ;	main.c:79: music_index = 0;
      00016E 75*02 00         [24]  676 	mov	_music_index,#0x00
      000171                        677 00106$:
                                    678 ;	main.c:82: EA = 1;
                                    679 ;	assignBit
      000171 D2 AF            [12]  680 	setb	_EA
                                    681 ;	main.c:85: return 0;
                                    682 ;	main.c:86: }
      000173 80 D4            [24]  683 	sjmp	00108$
                                    684 	.area CSEG    (CODE)
                                    685 	.area CONST   (CODE)
      000000                        686 _music:
      000000 0A                     687 	.db #0x0a	; 10
      000001 0A                     688 	.db #0x0a	; 10
      000002 0A                     689 	.db #0x0a	; 10
      000003 0A                     690 	.db #0x0a	; 10
      000004 09                     691 	.db #0x09	; 9
      000005 08                     692 	.db #0x08	; 8
      000006 08                     693 	.db #0x08	; 8
      000007 07                     694 	.db #0x07	; 7
      000008 06                     695 	.db #0x06	; 6
      000009 06                     696 	.db #0x06	; 6
      00000A 08                     697 	.db #0x08	; 8
      00000B 0A                     698 	.db #0x0a	; 10
      00000C 0D                     699 	.db #0x0d	; 13
      00000D 0D                     700 	.db #0x0d	; 13
      00000E 0D                     701 	.db #0x0d	; 13
      00000F 0D                     702 	.db #0x0d	; 13
      000010 0C                     703 	.db #0x0c	; 12
      000011 0B                     704 	.db #0x0b	; 11
      000012 0B                     705 	.db #0x0b	; 11
      000013 0A                     706 	.db #0x0a	; 10
      000014 09                     707 	.db #0x09	; 9
      000015 09                     708 	.db #0x09	; 9
      000016 0A                     709 	.db #0x0a	; 10
      000017 0B                     710 	.db #0x0b	; 11
      000018 0A                     711 	.db #0x0a	; 10
      000019 0B                     712 	.db #0x0b	; 11
      00001A 0A                     713 	.db #0x0a	; 10
      00001B 0C                     714 	.db #0x0c	; 12
      00001C 0B                     715 	.db #0x0b	; 11
      00001D 0A                     716 	.db #0x0a	; 10
      00001E 0A                     717 	.db #0x0a	; 10
      00001F 09                     718 	.db #0x09	; 9
      000020 08                     719 	.db #0x08	; 8
      000021 08                     720 	.db #0x08	; 8
      000022 07                     721 	.db #0x07	; 7
      000023 06                     722 	.db #0x06	; 6
      000024 07                     723 	.db #0x07	; 7
      000025 07                     724 	.db #0x07	; 7
      000026 07                     725 	.db #0x07	; 7
      000027 07                     726 	.db #0x07	; 7
      000028 08                     727 	.db #0x08	; 8
      000029 07                     728 	.db #0x07	; 7
      00002A 06                     729 	.db #0x06	; 6
      00002B 00                     730 	.db #0x00	; 0
      00002C 00                     731 	.db #0x00	; 0
      00002D 06                     732 	.db #0x06	; 6
      00002E 00                     733 	.db #0x00	; 0
      00002F 00                     734 	.db #0x00	; 0
      000030 0A                     735 	.db #0x0a	; 10
      000031 0A                     736 	.db #0x0a	; 10
      000032 0A                     737 	.db #0x0a	; 10
      000033 0A                     738 	.db #0x0a	; 10
      000034 09                     739 	.db #0x09	; 9
      000035 08                     740 	.db #0x08	; 8
      000036 08                     741 	.db #0x08	; 8
      000037 07                     742 	.db #0x07	; 7
      000038 07                     743 	.db #0x07	; 7
      000039 07                     744 	.db #0x07	; 7
      00003A 07                     745 	.db #0x07	; 7
      00003B 07                     746 	.db #0x07	; 7
      00003C 0D                     747 	.db #0x0d	; 13
      00003D 0D                     748 	.db #0x0d	; 13
      00003E 0D                     749 	.db #0x0d	; 13
      00003F 0D                     750 	.db #0x0d	; 13
      000040 0E                     751 	.db #0x0e	; 14
      000041 0D                     752 	.db #0x0d	; 13
      000042 0D                     753 	.db #0x0d	; 13
      000043 0C                     754 	.db #0x0c	; 12
      000044 0C                     755 	.db #0x0c	; 12
      000045 0C                     756 	.db #0x0c	; 12
      000046 0D                     757 	.db #0x0d	; 13
      000047 0E                     758 	.db #0x0e	; 14
      000048 0F                     759 	.db #0x0f	; 15
      000049 0F                     760 	.db #0x0f	; 15
      00004A 0F                     761 	.db #0x0f	; 15
      00004B 0F                     762 	.db #0x0f	; 15
      00004C 0E                     763 	.db #0x0e	; 14
      00004D 0E                     764 	.db #0x0e	; 14
      00004E 0D                     765 	.db #0x0d	; 13
      00004F 0D                     766 	.db #0x0d	; 13
      000050 0D                     767 	.db #0x0d	; 13
      000051 0D                     768 	.db #0x0d	; 13
      000052 0C                     769 	.db #0x0c	; 12
      000053 0B                     770 	.db #0x0b	; 11
      000054 0A                     771 	.db #0x0a	; 10
      000055 0A                     772 	.db #0x0a	; 10
      000056 0A                     773 	.db #0x0a	; 10
      000057 0A                     774 	.db #0x0a	; 10
      000058 0B                     775 	.db #0x0b	; 11
      000059 09                     776 	.db #0x09	; 9
      00005A 08                     777 	.db #0x08	; 8
      00005B 00                     778 	.db #0x00	; 0
      00005C 00                     779 	.db #0x00	; 0
      00005D 08                     780 	.db #0x08	; 8
      00005E 00                     781 	.db #0x00	; 0
      00005F 00                     782 	.db #0x00	; 0
                                    783 	.area XINIT   (CODE)
                                    784 	.area CABS    (ABS,CODE)
