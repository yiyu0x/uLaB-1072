                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _keyPressed
                                     13 	.globl _CY
                                     14 	.globl _AC
                                     15 	.globl _F0
                                     16 	.globl _RS1
                                     17 	.globl _RS0
                                     18 	.globl _OV
                                     19 	.globl _F1
                                     20 	.globl _P
                                     21 	.globl _PS
                                     22 	.globl _PT1
                                     23 	.globl _PX1
                                     24 	.globl _PT0
                                     25 	.globl _PX0
                                     26 	.globl _RD
                                     27 	.globl _WR
                                     28 	.globl _T1
                                     29 	.globl _T0
                                     30 	.globl _INT1
                                     31 	.globl _INT0
                                     32 	.globl _TXD
                                     33 	.globl _RXD
                                     34 	.globl _P3_7
                                     35 	.globl _P3_6
                                     36 	.globl _P3_5
                                     37 	.globl _P3_4
                                     38 	.globl _P3_3
                                     39 	.globl _P3_2
                                     40 	.globl _P3_1
                                     41 	.globl _P3_0
                                     42 	.globl _EA
                                     43 	.globl _ES
                                     44 	.globl _ET1
                                     45 	.globl _EX1
                                     46 	.globl _ET0
                                     47 	.globl _EX0
                                     48 	.globl _P2_7
                                     49 	.globl _P2_6
                                     50 	.globl _P2_5
                                     51 	.globl _P2_4
                                     52 	.globl _P2_3
                                     53 	.globl _P2_2
                                     54 	.globl _P2_1
                                     55 	.globl _P2_0
                                     56 	.globl _SM0
                                     57 	.globl _SM1
                                     58 	.globl _SM2
                                     59 	.globl _REN
                                     60 	.globl _TB8
                                     61 	.globl _RB8
                                     62 	.globl _TI
                                     63 	.globl _RI
                                     64 	.globl _P1_7
                                     65 	.globl _P1_6
                                     66 	.globl _P1_5
                                     67 	.globl _P1_4
                                     68 	.globl _P1_3
                                     69 	.globl _P1_2
                                     70 	.globl _P1_1
                                     71 	.globl _P1_0
                                     72 	.globl _TF1
                                     73 	.globl _TR1
                                     74 	.globl _TF0
                                     75 	.globl _TR0
                                     76 	.globl _IE1
                                     77 	.globl _IT1
                                     78 	.globl _IE0
                                     79 	.globl _IT0
                                     80 	.globl _P0_7
                                     81 	.globl _P0_6
                                     82 	.globl _P0_5
                                     83 	.globl _P0_4
                                     84 	.globl _P0_3
                                     85 	.globl _P0_2
                                     86 	.globl _P0_1
                                     87 	.globl _P0_0
                                     88 	.globl _B
                                     89 	.globl _ACC
                                     90 	.globl _PSW
                                     91 	.globl _IP
                                     92 	.globl _P3
                                     93 	.globl _IE
                                     94 	.globl _P2
                                     95 	.globl _SBUF
                                     96 	.globl _SCON
                                     97 	.globl _P1
                                     98 	.globl _TH1
                                     99 	.globl _TH0
                                    100 	.globl _TL1
                                    101 	.globl _TL0
                                    102 	.globl _TMOD
                                    103 	.globl _TCON
                                    104 	.globl _PCON
                                    105 	.globl _DPH
                                    106 	.globl _DPL
                                    107 	.globl _SP
                                    108 	.globl _P0
                                    109 ;--------------------------------------------------------
                                    110 ; special function registers
                                    111 ;--------------------------------------------------------
                                    112 	.area RSEG    (ABS,DATA)
      000000                        113 	.org 0x0000
                           000080   114 _P0	=	0x0080
                           000081   115 _SP	=	0x0081
                           000082   116 _DPL	=	0x0082
                           000083   117 _DPH	=	0x0083
                           000087   118 _PCON	=	0x0087
                           000088   119 _TCON	=	0x0088
                           000089   120 _TMOD	=	0x0089
                           00008A   121 _TL0	=	0x008a
                           00008B   122 _TL1	=	0x008b
                           00008C   123 _TH0	=	0x008c
                           00008D   124 _TH1	=	0x008d
                           000090   125 _P1	=	0x0090
                           000098   126 _SCON	=	0x0098
                           000099   127 _SBUF	=	0x0099
                           0000A0   128 _P2	=	0x00a0
                           0000A8   129 _IE	=	0x00a8
                           0000B0   130 _P3	=	0x00b0
                           0000B8   131 _IP	=	0x00b8
                           0000D0   132 _PSW	=	0x00d0
                           0000E0   133 _ACC	=	0x00e0
                           0000F0   134 _B	=	0x00f0
                                    135 ;--------------------------------------------------------
                                    136 ; special function bits
                                    137 ;--------------------------------------------------------
                                    138 	.area RSEG    (ABS,DATA)
      000000                        139 	.org 0x0000
                           000080   140 _P0_0	=	0x0080
                           000081   141 _P0_1	=	0x0081
                           000082   142 _P0_2	=	0x0082
                           000083   143 _P0_3	=	0x0083
                           000084   144 _P0_4	=	0x0084
                           000085   145 _P0_5	=	0x0085
                           000086   146 _P0_6	=	0x0086
                           000087   147 _P0_7	=	0x0087
                           000088   148 _IT0	=	0x0088
                           000089   149 _IE0	=	0x0089
                           00008A   150 _IT1	=	0x008a
                           00008B   151 _IE1	=	0x008b
                           00008C   152 _TR0	=	0x008c
                           00008D   153 _TF0	=	0x008d
                           00008E   154 _TR1	=	0x008e
                           00008F   155 _TF1	=	0x008f
                           000090   156 _P1_0	=	0x0090
                           000091   157 _P1_1	=	0x0091
                           000092   158 _P1_2	=	0x0092
                           000093   159 _P1_3	=	0x0093
                           000094   160 _P1_4	=	0x0094
                           000095   161 _P1_5	=	0x0095
                           000096   162 _P1_6	=	0x0096
                           000097   163 _P1_7	=	0x0097
                           000098   164 _RI	=	0x0098
                           000099   165 _TI	=	0x0099
                           00009A   166 _RB8	=	0x009a
                           00009B   167 _TB8	=	0x009b
                           00009C   168 _REN	=	0x009c
                           00009D   169 _SM2	=	0x009d
                           00009E   170 _SM1	=	0x009e
                           00009F   171 _SM0	=	0x009f
                           0000A0   172 _P2_0	=	0x00a0
                           0000A1   173 _P2_1	=	0x00a1
                           0000A2   174 _P2_2	=	0x00a2
                           0000A3   175 _P2_3	=	0x00a3
                           0000A4   176 _P2_4	=	0x00a4
                           0000A5   177 _P2_5	=	0x00a5
                           0000A6   178 _P2_6	=	0x00a6
                           0000A7   179 _P2_7	=	0x00a7
                           0000A8   180 _EX0	=	0x00a8
                           0000A9   181 _ET0	=	0x00a9
                           0000AA   182 _EX1	=	0x00aa
                           0000AB   183 _ET1	=	0x00ab
                           0000AC   184 _ES	=	0x00ac
                           0000AF   185 _EA	=	0x00af
                           0000B0   186 _P3_0	=	0x00b0
                           0000B1   187 _P3_1	=	0x00b1
                           0000B2   188 _P3_2	=	0x00b2
                           0000B3   189 _P3_3	=	0x00b3
                           0000B4   190 _P3_4	=	0x00b4
                           0000B5   191 _P3_5	=	0x00b5
                           0000B6   192 _P3_6	=	0x00b6
                           0000B7   193 _P3_7	=	0x00b7
                           0000B0   194 _RXD	=	0x00b0
                           0000B1   195 _TXD	=	0x00b1
                           0000B2   196 _INT0	=	0x00b2
                           0000B3   197 _INT1	=	0x00b3
                           0000B4   198 _T0	=	0x00b4
                           0000B5   199 _T1	=	0x00b5
                           0000B6   200 _WR	=	0x00b6
                           0000B7   201 _RD	=	0x00b7
                           0000B8   202 _PX0	=	0x00b8
                           0000B9   203 _PT0	=	0x00b9
                           0000BA   204 _PX1	=	0x00ba
                           0000BB   205 _PT1	=	0x00bb
                           0000BC   206 _PS	=	0x00bc
                           0000D0   207 _P	=	0x00d0
                           0000D1   208 _F1	=	0x00d1
                           0000D2   209 _OV	=	0x00d2
                           0000D3   210 _RS0	=	0x00d3
                           0000D4   211 _RS1	=	0x00d4
                           0000D5   212 _F0	=	0x00d5
                           0000D6   213 _AC	=	0x00d6
                           0000D7   214 _CY	=	0x00d7
                                    215 ;--------------------------------------------------------
                                    216 ; overlayable register banks
                                    217 ;--------------------------------------------------------
                                    218 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        219 	.ds 8
                                    220 ;--------------------------------------------------------
                                    221 ; internal ram data
                                    222 ;--------------------------------------------------------
                                    223 	.area DSEG    (DATA)
                                    224 ;--------------------------------------------------------
                                    225 ; overlayable items in internal ram 
                                    226 ;--------------------------------------------------------
                                    227 	.area	OSEG    (OVR,DATA)
      000000                        228 _keyPressed_row_65536_1:
      000000                        229 	.ds 2
                                    230 ;--------------------------------------------------------
                                    231 ; Stack segment in internal ram 
                                    232 ;--------------------------------------------------------
                                    233 	.area	SSEG
      000000                        234 __start__stack:
      000000                        235 	.ds	1
                                    236 
                                    237 ;--------------------------------------------------------
                                    238 ; indirectly addressable internal ram data
                                    239 ;--------------------------------------------------------
                                    240 	.area ISEG    (DATA)
                                    241 ;--------------------------------------------------------
                                    242 ; absolute internal ram data
                                    243 ;--------------------------------------------------------
                                    244 	.area IABS    (ABS,DATA)
                                    245 	.area IABS    (ABS,DATA)
                                    246 ;--------------------------------------------------------
                                    247 ; bit data
                                    248 ;--------------------------------------------------------
                                    249 	.area BSEG    (BIT)
                                    250 ;--------------------------------------------------------
                                    251 ; paged external ram data
                                    252 ;--------------------------------------------------------
                                    253 	.area PSEG    (PAG,XDATA)
                                    254 ;--------------------------------------------------------
                                    255 ; external ram data
                                    256 ;--------------------------------------------------------
                                    257 	.area XSEG    (XDATA)
                                    258 ;--------------------------------------------------------
                                    259 ; absolute external ram data
                                    260 ;--------------------------------------------------------
                                    261 	.area XABS    (ABS,XDATA)
                                    262 ;--------------------------------------------------------
                                    263 ; external initialized ram data
                                    264 ;--------------------------------------------------------
                                    265 	.area XISEG   (XDATA)
                                    266 	.area HOME    (CODE)
                                    267 	.area GSINIT0 (CODE)
                                    268 	.area GSINIT1 (CODE)
                                    269 	.area GSINIT2 (CODE)
                                    270 	.area GSINIT3 (CODE)
                                    271 	.area GSINIT4 (CODE)
                                    272 	.area GSINIT5 (CODE)
                                    273 	.area GSINIT  (CODE)
                                    274 	.area GSFINAL (CODE)
                                    275 	.area CSEG    (CODE)
                                    276 ;--------------------------------------------------------
                                    277 ; interrupt vector 
                                    278 ;--------------------------------------------------------
                                    279 	.area HOME    (CODE)
      000000                        280 __interrupt_vect:
      000000 02r00r00         [24]  281 	ljmp	__sdcc_gsinit_startup
                                    282 ;--------------------------------------------------------
                                    283 ; global & static initialisations
                                    284 ;--------------------------------------------------------
                                    285 	.area HOME    (CODE)
                                    286 	.area GSINIT  (CODE)
                                    287 	.area GSFINAL (CODE)
                                    288 	.area GSINIT  (CODE)
                                    289 	.globl __sdcc_gsinit_startup
                                    290 	.globl __sdcc_program_startup
                                    291 	.globl __start__stack
                                    292 	.globl __mcs51_genXINIT
                                    293 	.globl __mcs51_genXRAMCLEAR
                                    294 	.globl __mcs51_genRAMCLEAR
                                    295 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  296 	ljmp	__sdcc_program_startup
                                    297 ;--------------------------------------------------------
                                    298 ; Home
                                    299 ;--------------------------------------------------------
                                    300 	.area HOME    (CODE)
                                    301 	.area HOME    (CODE)
      000003                        302 __sdcc_program_startup:
      000003 02r00r70         [24]  303 	ljmp	_main
                                    304 ;	return from main will return to caller
                                    305 ;--------------------------------------------------------
                                    306 ; code
                                    307 ;--------------------------------------------------------
                                    308 	.area CSEG    (CODE)
                                    309 ;------------------------------------------------------------
                                    310 ;Allocation info for local variables in function 'keyPressed'
                                    311 ;------------------------------------------------------------
                                    312 ;row                       Allocated with name '_keyPressed_row_65536_1'
                                    313 ;c                         Allocated to registers r4 r5 
                                    314 ;col                       Allocated to registers r2 r3 
                                    315 ;magic                     Allocated to registers r7 r6 
                                    316 ;------------------------------------------------------------
                                    317 ;	main.c:3: short keyPressed(short row) {
                                    318 ;	-----------------------------------------
                                    319 ;	 function keyPressed
                                    320 ;	-----------------------------------------
      000000                        321 _keyPressed:
                           000007   322 	ar7 = 0x07
                           000006   323 	ar6 = 0x06
                           000005   324 	ar5 = 0x05
                           000004   325 	ar4 = 0x04
                           000003   326 	ar3 = 0x03
                           000002   327 	ar2 = 0x02
                           000001   328 	ar1 = 0x01
                           000000   329 	ar0 = 0x00
      000000 85 82*00         [24]  330 	mov	_keyPressed_row_65536_1,dpl
      000003 85 83*01         [24]  331 	mov	(_keyPressed_row_65536_1 + 1),dph
                                    332 ;	main.c:4: if((P0 & 0b11110000) != 0b11110000){	//if 按下按鈕
      000006 AC 80            [24]  333 	mov	r4,_P0
      000008 53 04 F0         [24]  334 	anl	ar4,#0xf0
      00000B 7D 00            [12]  335 	mov	r5,#0x00
      00000D BC F0 05         [24]  336 	cjne	r4,#0xf0,00127$
      000010 BD 00 02         [24]  337 	cjne	r5,#0x00,00127$
      000013 80 57            [24]  338 	sjmp	00105$
      000015                        339 00127$:
                                    340 ;	main.c:5: P1_1 = 0;
                                    341 ;	assignBit
      000015 C2 91            [12]  342 	clr	_P1_1
                                    343 ;	main.c:6: for (short c = 1, col = 0; col < 4; c *= 2, col++) {
      000017 7C 01            [12]  344 	mov	r4,#0x01
      000019 7D 00            [12]  345 	mov	r5,#0x00
      00001B 7A 00            [12]  346 	mov	r2,#0x00
      00001D 7B 00            [12]  347 	mov	r3,#0x00
      00001F 78 00            [12]  348 	mov	r0,#0x00
      000021 79 00            [12]  349 	mov	r1,#0x00
      000023                        350 00107$:
      000023 C3               [12]  351 	clr	c
      000024 E8               [12]  352 	mov	a,r0
      000025 94 04            [12]  353 	subb	a,#0x04
      000027 E9               [12]  354 	mov	a,r1
      000028 64 80            [12]  355 	xrl	a,#0x80
      00002A 94 80            [12]  356 	subb	a,#0x80
      00002C 50 3E            [24]  357 	jnc	00105$
                                    358 ;	main.c:8: `			short magic = ((P0 >> 4) ^ 0b11111111) & 0b00001111;
      00002E E5 80            [12]  359 	mov	a,_P0
      000030 C4               [12]  360 	swap	a
      000031 54 0F            [12]  361 	anl	a,#0x0f
      000033 FF               [12]  362 	mov	r7,a
      000034 63 07 FF         [24]  363 	xrl	ar7,#0xff
      000037 53 07 0F         [24]  364 	anl	ar7,#0x0f
      00003A 7E 00            [12]  365 	mov	r6,#0x00
                                    366 ;	main.c:9: if (magic == c) {
      00003C EF               [12]  367 	mov	a,r7
      00003D B5 04 1B         [24]  368 	cjne	a,ar4,00108$
      000040 EE               [12]  369 	mov	a,r6
      000041 B5 05 17         [24]  370 	cjne	a,ar5,00108$
                                    371 ;	main.c:10: return col * 4 + row;
      000044 EA               [12]  372 	mov	a,r2
      000045 2A               [12]  373 	add	a,r2
      000046 FE               [12]  374 	mov	r6,a
      000047 EB               [12]  375 	mov	a,r3
      000048 33               [12]  376 	rlc	a
      000049 FF               [12]  377 	mov	r7,a
      00004A EE               [12]  378 	mov	a,r6
      00004B 2E               [12]  379 	add	a,r6
      00004C FE               [12]  380 	mov	r6,a
      00004D EF               [12]  381 	mov	a,r7
      00004E 33               [12]  382 	rlc	a
      00004F FF               [12]  383 	mov	r7,a
      000050 E5*00            [12]  384 	mov	a,_keyPressed_row_65536_1
      000052 2E               [12]  385 	add	a,r6
      000053 F5 82            [12]  386 	mov	dpl,a
      000055 E5*01            [12]  387 	mov	a,(_keyPressed_row_65536_1 + 1)
      000057 3F               [12]  388 	addc	a,r7
      000058 F5 83            [12]  389 	mov	dph,a
      00005A 22               [24]  390 	ret
      00005B                        391 00108$:
                                    392 ;	main.c:6: for (short c = 1, col = 0; col < 4; c *= 2, col++) {
      00005B EC               [12]  393 	mov	a,r4
      00005C 2C               [12]  394 	add	a,r4
      00005D FC               [12]  395 	mov	r4,a
      00005E ED               [12]  396 	mov	a,r5
      00005F 33               [12]  397 	rlc	a
      000060 FD               [12]  398 	mov	r5,a
      000061 08               [12]  399 	inc	r0
      000062 B8 00 01         [24]  400 	cjne	r0,#0x00,00131$
      000065 09               [12]  401 	inc	r1
      000066                        402 00131$:
      000066 88 02            [24]  403 	mov	ar2,r0
      000068 89 03            [24]  404 	mov	ar3,r1
      00006A 80 B7            [24]  405 	sjmp	00107$
      00006C                        406 00105$:
                                    407 ;	main.c:15: return -1;	//沒按 return -1
      00006C 90 FF FF         [24]  408 	mov	dptr,#0xffff
                                    409 ;	main.c:16: }
      00006F 22               [24]  410 	ret
                                    411 ;------------------------------------------------------------
                                    412 ;Allocation info for local variables in function 'main'
                                    413 ;------------------------------------------------------------
                                    414 ;previous                  Allocated to registers 
                                    415 ;row                       Allocated to registers r6 r7 
                                    416 ;count                     Allocated to registers r4 r5 
                                    417 ;key                       Allocated to registers r2 r3 
                                    418 ;------------------------------------------------------------
                                    419 ;	main.c:18: int main() {
                                    420 ;	-----------------------------------------
                                    421 ;	 function main
                                    422 ;	-----------------------------------------
      000070                        423 _main:
                                    424 ;	main.c:20: short row = 0;
      000070 7E 00            [12]  425 	mov	r6,#0x00
      000072 7F 00            [12]  426 	mov	r7,#0x00
                                    427 ;	main.c:21: short count = 1;
      000074 7C 01            [12]  428 	mov	r4,#0x01
      000076 7D 00            [12]  429 	mov	r5,#0x00
                                    430 ;	main.c:22: P1_1=1;
                                    431 ;	assignBit
      000078 D2 91            [12]  432 	setb	_P1_1
                                    433 ;	main.c:23: while (1) {
      00007A                        434 00106$:
                                    435 ;	main.c:24: count*=2;
      00007A EC               [12]  436 	mov	a,r4
      00007B 2C               [12]  437 	add	a,r4
      00007C FC               [12]  438 	mov	r4,a
      00007D ED               [12]  439 	mov	a,r5
      00007E 33               [12]  440 	rlc	a
      00007F FD               [12]  441 	mov	r5,a
                                    442 ;	main.c:25: P0    =count^0b11111111;
      000080 74 FF            [12]  443 	mov	a,#0xff
      000082 6C               [12]  444 	xrl	a,r4
      000083 FA               [12]  445 	mov	r2,a
      000084 8D 03            [24]  446 	mov	ar3,r5
      000086 8A 80            [24]  447 	mov	_P0,r2
                                    448 ;	main.c:26: short key = keyPressed(row);
      000088 8E 82            [24]  449 	mov	dpl,r6
      00008A 8F 83            [24]  450 	mov	dph,r7
      00008C C0 07            [24]  451 	push	ar7
      00008E C0 06            [24]  452 	push	ar6
      000090 C0 05            [24]  453 	push	ar5
      000092 C0 04            [24]  454 	push	ar4
      000094 12r00r00         [24]  455 	lcall	_keyPressed
      000097 AA 82            [24]  456 	mov	r2,dpl
      000099 AB 83            [24]  457 	mov	r3,dph
      00009B D0 04            [24]  458 	pop	ar4
      00009D D0 05            [24]  459 	pop	ar5
      00009F D0 06            [24]  460 	pop	ar6
      0000A1 D0 07            [24]  461 	pop	ar7
                                    462 ;	main.c:27: if(key==-1){
      0000A3 BA FF 05         [24]  463 	cjne	r2,#0xff,00102$
      0000A6 BB FF 02         [24]  464 	cjne	r3,#0xff,00102$
                                    465 ;	main.c:28: P1_1=1;
                                    466 ;	assignBit
      0000A9 D2 91            [12]  467 	setb	_P1_1
      0000AB                        468 00102$:
                                    469 ;	main.c:35: row++;
      0000AB 0E               [12]  470 	inc	r6
      0000AC BE 00 01         [24]  471 	cjne	r6,#0x00,00124$
      0000AF 0F               [12]  472 	inc	r7
      0000B0                        473 00124$:
                                    474 ;	main.c:36: if (count == 0x10) {	//用count從上往下掃 
      0000B0 BC 10 C7         [24]  475 	cjne	r4,#0x10,00106$
      0000B3 BD 00 C4         [24]  476 	cjne	r5,#0x00,00106$
                                    477 ;	main.c:37: count = 1;
      0000B6 7C 01            [12]  478 	mov	r4,#0x01
      0000B8 7D 00            [12]  479 	mov	r5,#0x00
                                    480 ;	main.c:38: row   = 0;
      0000BA 7E 00            [12]  481 	mov	r6,#0x00
      0000BC 7F 00            [12]  482 	mov	r7,#0x00
                                    483 ;	main.c:42: }
      0000BE 80 BA            [24]  484 	sjmp	00106$
                                    485 	.area CSEG    (CODE)
                                    486 	.area CONST   (CODE)
                                    487 	.area XINIT   (CODE)
                                    488 	.area CABS    (ABS,CODE)
