                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _display_PARM_5
                                     12 	.globl _display_PARM_4
                                     13 	.globl _display_PARM_3
                                     14 	.globl _display_PARM_2
                                     15 	.globl _main
                                     16 	.globl _display
                                     17 	.globl _keyPressed
                                     18 	.globl _CY
                                     19 	.globl _AC
                                     20 	.globl _F0
                                     21 	.globl _RS1
                                     22 	.globl _RS0
                                     23 	.globl _OV
                                     24 	.globl _F1
                                     25 	.globl _P
                                     26 	.globl _PS
                                     27 	.globl _PT1
                                     28 	.globl _PX1
                                     29 	.globl _PT0
                                     30 	.globl _PX0
                                     31 	.globl _RD
                                     32 	.globl _WR
                                     33 	.globl _T1
                                     34 	.globl _T0
                                     35 	.globl _INT1
                                     36 	.globl _INT0
                                     37 	.globl _TXD
                                     38 	.globl _RXD
                                     39 	.globl _P3_7
                                     40 	.globl _P3_6
                                     41 	.globl _P3_5
                                     42 	.globl _P3_4
                                     43 	.globl _P3_3
                                     44 	.globl _P3_2
                                     45 	.globl _P3_1
                                     46 	.globl _P3_0
                                     47 	.globl _EA
                                     48 	.globl _ES
                                     49 	.globl _ET1
                                     50 	.globl _EX1
                                     51 	.globl _ET0
                                     52 	.globl _EX0
                                     53 	.globl _P2_7
                                     54 	.globl _P2_6
                                     55 	.globl _P2_5
                                     56 	.globl _P2_4
                                     57 	.globl _P2_3
                                     58 	.globl _P2_2
                                     59 	.globl _P2_1
                                     60 	.globl _P2_0
                                     61 	.globl _SM0
                                     62 	.globl _SM1
                                     63 	.globl _SM2
                                     64 	.globl _REN
                                     65 	.globl _TB8
                                     66 	.globl _RB8
                                     67 	.globl _TI
                                     68 	.globl _RI
                                     69 	.globl _P1_7
                                     70 	.globl _P1_6
                                     71 	.globl _P1_5
                                     72 	.globl _P1_4
                                     73 	.globl _P1_3
                                     74 	.globl _P1_2
                                     75 	.globl _P1_1
                                     76 	.globl _P1_0
                                     77 	.globl _TF1
                                     78 	.globl _TR1
                                     79 	.globl _TF0
                                     80 	.globl _TR0
                                     81 	.globl _IE1
                                     82 	.globl _IT1
                                     83 	.globl _IE0
                                     84 	.globl _IT0
                                     85 	.globl _P0_7
                                     86 	.globl _P0_6
                                     87 	.globl _P0_5
                                     88 	.globl _P0_4
                                     89 	.globl _P0_3
                                     90 	.globl _P0_2
                                     91 	.globl _P0_1
                                     92 	.globl _P0_0
                                     93 	.globl _B
                                     94 	.globl _ACC
                                     95 	.globl _PSW
                                     96 	.globl _IP
                                     97 	.globl _P3
                                     98 	.globl _IE
                                     99 	.globl _P2
                                    100 	.globl _SBUF
                                    101 	.globl _SCON
                                    102 	.globl _P1
                                    103 	.globl _TH1
                                    104 	.globl _TH0
                                    105 	.globl _TL1
                                    106 	.globl _TL0
                                    107 	.globl _TMOD
                                    108 	.globl _TCON
                                    109 	.globl _PCON
                                    110 	.globl _DPH
                                    111 	.globl _DPL
                                    112 	.globl _SP
                                    113 	.globl _P0
                                    114 ;--------------------------------------------------------
                                    115 ; special function registers
                                    116 ;--------------------------------------------------------
                                    117 	.area RSEG    (ABS,DATA)
      000000                        118 	.org 0x0000
                           000080   119 _P0	=	0x0080
                           000081   120 _SP	=	0x0081
                           000082   121 _DPL	=	0x0082
                           000083   122 _DPH	=	0x0083
                           000087   123 _PCON	=	0x0087
                           000088   124 _TCON	=	0x0088
                           000089   125 _TMOD	=	0x0089
                           00008A   126 _TL0	=	0x008a
                           00008B   127 _TL1	=	0x008b
                           00008C   128 _TH0	=	0x008c
                           00008D   129 _TH1	=	0x008d
                           000090   130 _P1	=	0x0090
                           000098   131 _SCON	=	0x0098
                           000099   132 _SBUF	=	0x0099
                           0000A0   133 _P2	=	0x00a0
                           0000A8   134 _IE	=	0x00a8
                           0000B0   135 _P3	=	0x00b0
                           0000B8   136 _IP	=	0x00b8
                           0000D0   137 _PSW	=	0x00d0
                           0000E0   138 _ACC	=	0x00e0
                           0000F0   139 _B	=	0x00f0
                                    140 ;--------------------------------------------------------
                                    141 ; special function bits
                                    142 ;--------------------------------------------------------
                                    143 	.area RSEG    (ABS,DATA)
      000000                        144 	.org 0x0000
                           000080   145 _P0_0	=	0x0080
                           000081   146 _P0_1	=	0x0081
                           000082   147 _P0_2	=	0x0082
                           000083   148 _P0_3	=	0x0083
                           000084   149 _P0_4	=	0x0084
                           000085   150 _P0_5	=	0x0085
                           000086   151 _P0_6	=	0x0086
                           000087   152 _P0_7	=	0x0087
                           000088   153 _IT0	=	0x0088
                           000089   154 _IE0	=	0x0089
                           00008A   155 _IT1	=	0x008a
                           00008B   156 _IE1	=	0x008b
                           00008C   157 _TR0	=	0x008c
                           00008D   158 _TF0	=	0x008d
                           00008E   159 _TR1	=	0x008e
                           00008F   160 _TF1	=	0x008f
                           000090   161 _P1_0	=	0x0090
                           000091   162 _P1_1	=	0x0091
                           000092   163 _P1_2	=	0x0092
                           000093   164 _P1_3	=	0x0093
                           000094   165 _P1_4	=	0x0094
                           000095   166 _P1_5	=	0x0095
                           000096   167 _P1_6	=	0x0096
                           000097   168 _P1_7	=	0x0097
                           000098   169 _RI	=	0x0098
                           000099   170 _TI	=	0x0099
                           00009A   171 _RB8	=	0x009a
                           00009B   172 _TB8	=	0x009b
                           00009C   173 _REN	=	0x009c
                           00009D   174 _SM2	=	0x009d
                           00009E   175 _SM1	=	0x009e
                           00009F   176 _SM0	=	0x009f
                           0000A0   177 _P2_0	=	0x00a0
                           0000A1   178 _P2_1	=	0x00a1
                           0000A2   179 _P2_2	=	0x00a2
                           0000A3   180 _P2_3	=	0x00a3
                           0000A4   181 _P2_4	=	0x00a4
                           0000A5   182 _P2_5	=	0x00a5
                           0000A6   183 _P2_6	=	0x00a6
                           0000A7   184 _P2_7	=	0x00a7
                           0000A8   185 _EX0	=	0x00a8
                           0000A9   186 _ET0	=	0x00a9
                           0000AA   187 _EX1	=	0x00aa
                           0000AB   188 _ET1	=	0x00ab
                           0000AC   189 _ES	=	0x00ac
                           0000AF   190 _EA	=	0x00af
                           0000B0   191 _P3_0	=	0x00b0
                           0000B1   192 _P3_1	=	0x00b1
                           0000B2   193 _P3_2	=	0x00b2
                           0000B3   194 _P3_3	=	0x00b3
                           0000B4   195 _P3_4	=	0x00b4
                           0000B5   196 _P3_5	=	0x00b5
                           0000B6   197 _P3_6	=	0x00b6
                           0000B7   198 _P3_7	=	0x00b7
                           0000B0   199 _RXD	=	0x00b0
                           0000B1   200 _TXD	=	0x00b1
                           0000B2   201 _INT0	=	0x00b2
                           0000B3   202 _INT1	=	0x00b3
                           0000B4   203 _T0	=	0x00b4
                           0000B5   204 _T1	=	0x00b5
                           0000B6   205 _WR	=	0x00b6
                           0000B7   206 _RD	=	0x00b7
                           0000B8   207 _PX0	=	0x00b8
                           0000B9   208 _PT0	=	0x00b9
                           0000BA   209 _PX1	=	0x00ba
                           0000BB   210 _PT1	=	0x00bb
                           0000BC   211 _PS	=	0x00bc
                           0000D0   212 _P	=	0x00d0
                           0000D1   213 _F1	=	0x00d1
                           0000D2   214 _OV	=	0x00d2
                           0000D3   215 _RS0	=	0x00d3
                           0000D4   216 _RS1	=	0x00d4
                           0000D5   217 _F0	=	0x00d5
                           0000D6   218 _AC	=	0x00d6
                           0000D7   219 _CY	=	0x00d7
                                    220 ;--------------------------------------------------------
                                    221 ; overlayable register banks
                                    222 ;--------------------------------------------------------
                                    223 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        224 	.ds 8
                                    225 ;--------------------------------------------------------
                                    226 ; internal ram data
                                    227 ;--------------------------------------------------------
                                    228 	.area DSEG    (DATA)
      000000                        229 _main_previous_65536_20:
      000000                        230 	.ds 2
      000002                        231 _main_row_65536_20:
      000002                        232 	.ds 2
      000004                        233 _main_count_65536_20:
      000004                        234 	.ds 2
      000006                        235 _main_num_65536_20:
      000006                        236 	.ds 8
      00000E                        237 _main_alpha_65536_20:
      00000E                        238 	.ds 22
      000024                        239 _main_table_65536_20:
      000024                        240 	.ds 8
      00002C                        241 _main_index_65537_21:
      00002C                        242 	.ds 2
      00002E                        243 _main_flash_flag_65537_21:
      00002E                        244 	.ds 4
                                    245 ;--------------------------------------------------------
                                    246 ; overlayable items in internal ram 
                                    247 ;--------------------------------------------------------
                                    248 	.area	OSEG    (OVR,DATA)
      000000                        249 _keyPressed_row_65536_1:
      000000                        250 	.ds 2
                                    251 	.area	OSEG    (OVR,DATA)
      000000                        252 _display_PARM_2:
      000000                        253 	.ds 3
      000003                        254 _display_PARM_3:
      000003                        255 	.ds 3
      000006                        256 _display_PARM_4:
      000006                        257 	.ds 1
      000007                        258 _display_PARM_5:
      000007                        259 	.ds 4
      00000B                        260 _display_table_65536_7:
      00000B                        261 	.ds 3
      00000E                        262 _display_t_262144_11:
      00000E                        263 	.ds 2
      000010                        264 _display_t_196608_16:
      000010                        265 	.ds 2
                                    266 ;--------------------------------------------------------
                                    267 ; Stack segment in internal ram 
                                    268 ;--------------------------------------------------------
                                    269 	.area	SSEG
      000000                        270 __start__stack:
      000000                        271 	.ds	1
                                    272 
                                    273 ;--------------------------------------------------------
                                    274 ; indirectly addressable internal ram data
                                    275 ;--------------------------------------------------------
                                    276 	.area ISEG    (DATA)
                                    277 ;--------------------------------------------------------
                                    278 ; absolute internal ram data
                                    279 ;--------------------------------------------------------
                                    280 	.area IABS    (ABS,DATA)
                                    281 	.area IABS    (ABS,DATA)
                                    282 ;--------------------------------------------------------
                                    283 ; bit data
                                    284 ;--------------------------------------------------------
                                    285 	.area BSEG    (BIT)
                                    286 ;--------------------------------------------------------
                                    287 ; paged external ram data
                                    288 ;--------------------------------------------------------
                                    289 	.area PSEG    (PAG,XDATA)
                                    290 ;--------------------------------------------------------
                                    291 ; external ram data
                                    292 ;--------------------------------------------------------
                                    293 	.area XSEG    (XDATA)
                                    294 ;--------------------------------------------------------
                                    295 ; absolute external ram data
                                    296 ;--------------------------------------------------------
                                    297 	.area XABS    (ABS,XDATA)
                                    298 ;--------------------------------------------------------
                                    299 ; external initialized ram data
                                    300 ;--------------------------------------------------------
                                    301 	.area XISEG   (XDATA)
                                    302 	.area HOME    (CODE)
                                    303 	.area GSINIT0 (CODE)
                                    304 	.area GSINIT1 (CODE)
                                    305 	.area GSINIT2 (CODE)
                                    306 	.area GSINIT3 (CODE)
                                    307 	.area GSINIT4 (CODE)
                                    308 	.area GSINIT5 (CODE)
                                    309 	.area GSINIT  (CODE)
                                    310 	.area GSFINAL (CODE)
                                    311 	.area CSEG    (CODE)
                                    312 ;--------------------------------------------------------
                                    313 ; interrupt vector 
                                    314 ;--------------------------------------------------------
                                    315 	.area HOME    (CODE)
      000000                        316 __interrupt_vect:
      000000 02r00r00         [24]  317 	ljmp	__sdcc_gsinit_startup
                                    318 ;--------------------------------------------------------
                                    319 ; global & static initialisations
                                    320 ;--------------------------------------------------------
                                    321 	.area HOME    (CODE)
                                    322 	.area GSINIT  (CODE)
                                    323 	.area GSFINAL (CODE)
                                    324 	.area GSINIT  (CODE)
                                    325 	.globl __sdcc_gsinit_startup
                                    326 	.globl __sdcc_program_startup
                                    327 	.globl __start__stack
                                    328 	.globl __mcs51_genXINIT
                                    329 	.globl __mcs51_genXRAMCLEAR
                                    330 	.globl __mcs51_genRAMCLEAR
                                    331 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  332 	ljmp	__sdcc_program_startup
                                    333 ;--------------------------------------------------------
                                    334 ; Home
                                    335 ;--------------------------------------------------------
                                    336 	.area HOME    (CODE)
                                    337 	.area HOME    (CODE)
      000003                        338 __sdcc_program_startup:
      000003 02r01rB4         [24]  339 	ljmp	_main
                                    340 ;	return from main will return to caller
                                    341 ;--------------------------------------------------------
                                    342 ; code
                                    343 ;--------------------------------------------------------
                                    344 	.area CSEG    (CODE)
                                    345 ;------------------------------------------------------------
                                    346 ;Allocation info for local variables in function 'keyPressed'
                                    347 ;------------------------------------------------------------
                                    348 ;row                       Allocated with name '_keyPressed_row_65536_1'
                                    349 ;c                         Allocated to registers r4 r5 
                                    350 ;col                       Allocated to registers r2 r3 
                                    351 ;magic                     Allocated to registers r7 r6 
                                    352 ;------------------------------------------------------------
                                    353 ;	main.c:4: short keyPressed(short row) {
                                    354 ;	-----------------------------------------
                                    355 ;	 function keyPressed
                                    356 ;	-----------------------------------------
      000000                        357 _keyPressed:
                           000007   358 	ar7 = 0x07
                           000006   359 	ar6 = 0x06
                           000005   360 	ar5 = 0x05
                           000004   361 	ar4 = 0x04
                           000003   362 	ar3 = 0x03
                           000002   363 	ar2 = 0x02
                           000001   364 	ar1 = 0x01
                           000000   365 	ar0 = 0x00
      000000 85 82*00         [24]  366 	mov	_keyPressed_row_65536_1,dpl
      000003 85 83*01         [24]  367 	mov	(_keyPressed_row_65536_1 + 1),dph
                                    368 ;	main.c:5: if((P0 & 0b11110000) != 0b11110000){	//if 按下按鈕
      000006 AC 80            [24]  369 	mov	r4,_P0
      000008 53 04 F0         [24]  370 	anl	ar4,#0xf0
      00000B 7D 00            [12]  371 	mov	r5,#0x00
      00000D BC F0 05         [24]  372 	cjne	r4,#0xf0,00127$
      000010 BD 00 02         [24]  373 	cjne	r5,#0x00,00127$
      000013 80 56            [24]  374 	sjmp	00105$
      000015                        375 00127$:
                                    376 ;	main.c:6: for (short c = 1, col = 0; col < 4; c *= 2, col++) {
      000015 7C 01            [12]  377 	mov	r4,#0x01
      000017 7D 00            [12]  378 	mov	r5,#0x00
      000019 7A 00            [12]  379 	mov	r2,#0x00
      00001B 7B 00            [12]  380 	mov	r3,#0x00
      00001D 78 00            [12]  381 	mov	r0,#0x00
      00001F 79 00            [12]  382 	mov	r1,#0x00
      000021                        383 00107$:
      000021 C3               [12]  384 	clr	c
      000022 E8               [12]  385 	mov	a,r0
      000023 94 04            [12]  386 	subb	a,#0x04
      000025 E9               [12]  387 	mov	a,r1
      000026 64 80            [12]  388 	xrl	a,#0x80
      000028 94 80            [12]  389 	subb	a,#0x80
      00002A 50 3F            [24]  390 	jnc	00105$
                                    391 ;	main.c:8: `			short magic = ((P0 >> 4) ^ 0b11111111) & 0b00001111;
      00002C E5 80            [12]  392 	mov	a,_P0
      00002E C4               [12]  393 	swap	a
      00002F 54 0F            [12]  394 	anl	a,#0x0f
      000031 FF               [12]  395 	mov	r7,a
      000032 63 07 FF         [24]  396 	xrl	ar7,#0xff
      000035 53 07 0F         [24]  397 	anl	ar7,#0x0f
      000038 7E 00            [12]  398 	mov	r6,#0x00
                                    399 ;	main.c:9: if (magic == c) {
      00003A EF               [12]  400 	mov	a,r7
      00003B B5 04 1C         [24]  401 	cjne	a,ar4,00108$
      00003E EE               [12]  402 	mov	a,r6
      00003F B5 05 18         [24]  403 	cjne	a,ar5,00108$
                                    404 ;	main.c:10: return row * 4 + col;
      000042 E5*00            [12]  405 	mov	a,_keyPressed_row_65536_1
      000044 25*00            [12]  406 	add	a,_keyPressed_row_65536_1
      000046 FE               [12]  407 	mov	r6,a
      000047 E5*01            [12]  408 	mov	a,(_keyPressed_row_65536_1 + 1)
      000049 33               [12]  409 	rlc	a
      00004A FF               [12]  410 	mov	r7,a
      00004B EE               [12]  411 	mov	a,r6
      00004C 2E               [12]  412 	add	a,r6
      00004D FE               [12]  413 	mov	r6,a
      00004E EF               [12]  414 	mov	a,r7
      00004F 33               [12]  415 	rlc	a
      000050 FF               [12]  416 	mov	r7,a
      000051 EA               [12]  417 	mov	a,r2
      000052 2E               [12]  418 	add	a,r6
      000053 F5 82            [12]  419 	mov	dpl,a
      000055 EB               [12]  420 	mov	a,r3
      000056 3F               [12]  421 	addc	a,r7
      000057 F5 83            [12]  422 	mov	dph,a
      000059 22               [24]  423 	ret
      00005A                        424 00108$:
                                    425 ;	main.c:6: for (short c = 1, col = 0; col < 4; c *= 2, col++) {
      00005A EC               [12]  426 	mov	a,r4
      00005B 2C               [12]  427 	add	a,r4
      00005C FC               [12]  428 	mov	r4,a
      00005D ED               [12]  429 	mov	a,r5
      00005E 33               [12]  430 	rlc	a
      00005F FD               [12]  431 	mov	r5,a
      000060 08               [12]  432 	inc	r0
      000061 B8 00 01         [24]  433 	cjne	r0,#0x00,00131$
      000064 09               [12]  434 	inc	r1
      000065                        435 00131$:
      000065 88 02            [24]  436 	mov	ar2,r0
      000067 89 03            [24]  437 	mov	ar3,r1
      000069 80 B6            [24]  438 	sjmp	00107$
      00006B                        439 00105$:
                                    440 ;	main.c:14: return -1;	//沒按 return -1
      00006B 90 FF FF         [24]  441 	mov	dptr,#0xffff
                                    442 ;	main.c:15: }
      00006E 22               [24]  443 	ret
                                    444 ;------------------------------------------------------------
                                    445 ;Allocation info for local variables in function 'display'
                                    446 ;------------------------------------------------------------
                                    447 ;alpha                     Allocated with name '_display_PARM_2'
                                    448 ;num                       Allocated with name '_display_PARM_3'
                                    449 ;isSetting                 Allocated with name '_display_PARM_4'
                                    450 ;flash_flag                Allocated with name '_display_PARM_5'
                                    451 ;table                     Allocated with name '_display_table_65536_7'
                                    452 ;i                         Allocated to registers r1 r2 
                                    453 ;t                         Allocated with name '_display_t_262144_11'
                                    454 ;j                         Allocated to registers r6 r7 
                                    455 ;i                         Allocated to registers r4 r5 
                                    456 ;t                         Allocated with name '_display_t_196608_16'
                                    457 ;j                         Allocated to registers r6 r7 
                                    458 ;------------------------------------------------------------
                                    459 ;	main.c:17: void display(short table[], short alpha[], short num[], bool isSetting, long flash_flag) {
                                    460 ;	-----------------------------------------
                                    461 ;	 function display
                                    462 ;	-----------------------------------------
      00006F                        463 _display:
      00006F 85 82*0B         [24]  464 	mov	_display_table_65536_7,dpl
      000072 85 83*0C         [24]  465 	mov	(_display_table_65536_7 + 1),dph
      000075 85 F0*0D         [24]  466 	mov	(_display_table_65536_7 + 2),b
                                    467 ;	main.c:18: if (isSetting) {
      000078 E5*06            [12]  468 	mov	a,_display_PARM_4
      00007A 70 03            [24]  469 	jnz	00168$
      00007C 02r01r26         [24]  470 	ljmp	00108$
      00007F                        471 00168$:
                                    472 ;	main.c:19: if (flash_flag > 7800) {
      00007F C3               [12]  473 	clr	c
      000080 74 78            [12]  474 	mov	a,#0x78
      000082 95*07            [12]  475 	subb	a,_display_PARM_5
      000084 74 1E            [12]  476 	mov	a,#0x1e
      000086 95*08            [12]  477 	subb	a,(_display_PARM_5 + 1)
      000088 E4               [12]  478 	clr	a
      000089 95*09            [12]  479 	subb	a,(_display_PARM_5 + 2)
      00008B 74 80            [12]  480 	mov	a,#(0x00 ^ 0x80)
      00008D 85*0A F0         [24]  481 	mov	b,(_display_PARM_5 + 3)
      000090 63 F0 80         [24]  482 	xrl	b,#0x80
      000093 95 F0            [12]  483 	subb	a,b
      000095 40 01            [24]  484 	jc	00169$
      000097 22               [24]  485 	ret
      000098                        486 00169$:
                                    487 ;	main.c:20: for(short i = 0,t=1; i < 4; i++,t*=2) {
      000098 75*0E 01         [24]  488 	mov	_display_t_262144_11,#0x01
      00009B 75*0F 00         [24]  489 	mov	(_display_t_262144_11 + 1),#0x00
      00009E 79 00            [12]  490 	mov	r1,#0x00
      0000A0 7A 00            [12]  491 	mov	r2,#0x00
      0000A2                        492 00114$:
      0000A2 C3               [12]  493 	clr	c
      0000A3 E9               [12]  494 	mov	a,r1
      0000A4 94 04            [12]  495 	subb	a,#0x04
      0000A6 EA               [12]  496 	mov	a,r2
      0000A7 64 80            [12]  497 	xrl	a,#0x80
      0000A9 94 80            [12]  498 	subb	a,#0x80
      0000AB 40 01            [24]  499 	jc	00170$
      0000AD 22               [24]  500 	ret
      0000AE                        501 00170$:
                                    502 ;	main.c:21: P1 = table[i];
      0000AE E9               [12]  503 	mov	a,r1
      0000AF 29               [12]  504 	add	a,r1
      0000B0 F8               [12]  505 	mov	r0,a
      0000B1 EA               [12]  506 	mov	a,r2
      0000B2 33               [12]  507 	rlc	a
      0000B3 FC               [12]  508 	mov	r4,a
      0000B4 E8               [12]  509 	mov	a,r0
      0000B5 25*0B            [12]  510 	add	a,_display_table_65536_7
      0000B7 FB               [12]  511 	mov	r3,a
      0000B8 EC               [12]  512 	mov	a,r4
      0000B9 35*0C            [12]  513 	addc	a,(_display_table_65536_7 + 1)
      0000BB FE               [12]  514 	mov	r6,a
      0000BC AF*0D            [24]  515 	mov	r7,(_display_table_65536_7 + 2)
      0000BE 8B 82            [24]  516 	mov	dpl,r3
      0000C0 8E 83            [24]  517 	mov	dph,r6
      0000C2 8F F0            [24]  518 	mov	b,r7
      0000C4 12r00r00         [24]  519 	lcall	__gptrget
      0000C7 F5 90            [12]  520 	mov	_P1,a
                                    521 ;	main.c:22: P2 = alpha[num[i]];
      0000C9 E8               [12]  522 	mov	a,r0
      0000CA 25*03            [12]  523 	add	a,_display_PARM_3
      0000CC F8               [12]  524 	mov	r0,a
      0000CD EC               [12]  525 	mov	a,r4
      0000CE 35*04            [12]  526 	addc	a,(_display_PARM_3 + 1)
      0000D0 FC               [12]  527 	mov	r4,a
      0000D1 AF*05            [24]  528 	mov	r7,(_display_PARM_3 + 2)
      0000D3 88 82            [24]  529 	mov	dpl,r0
      0000D5 8C 83            [24]  530 	mov	dph,r4
      0000D7 8F F0            [24]  531 	mov	b,r7
      0000D9 12r00r00         [24]  532 	lcall	__gptrget
      0000DC F8               [12]  533 	mov	r0,a
      0000DD A3               [24]  534 	inc	dptr
      0000DE 12r00r00         [24]  535 	lcall	__gptrget
      0000E1 FC               [12]  536 	mov	r4,a
      0000E2 E8               [12]  537 	mov	a,r0
      0000E3 28               [12]  538 	add	a,r0
      0000E4 F8               [12]  539 	mov	r0,a
      0000E5 EC               [12]  540 	mov	a,r4
      0000E6 33               [12]  541 	rlc	a
      0000E7 FC               [12]  542 	mov	r4,a
      0000E8 E8               [12]  543 	mov	a,r0
      0000E9 25*00            [12]  544 	add	a,_display_PARM_2
      0000EB F8               [12]  545 	mov	r0,a
      0000EC EC               [12]  546 	mov	a,r4
      0000ED 35*01            [12]  547 	addc	a,(_display_PARM_2 + 1)
      0000EF FC               [12]  548 	mov	r4,a
      0000F0 AF*02            [24]  549 	mov	r7,(_display_PARM_2 + 2)
      0000F2 88 82            [24]  550 	mov	dpl,r0
      0000F4 8C 83            [24]  551 	mov	dph,r4
      0000F6 8F F0            [24]  552 	mov	b,r7
      0000F8 12r00r00         [24]  553 	lcall	__gptrget
      0000FB F5 A0            [12]  554 	mov	_P2,a
                                    555 ;	main.c:23: for(int j = 0; j < 500; j++){}
      0000FD 7E 00            [12]  556 	mov	r6,#0x00
      0000FF 7F 00            [12]  557 	mov	r7,#0x00
      000101                        558 00111$:
      000101 C3               [12]  559 	clr	c
      000102 EE               [12]  560 	mov	a,r6
      000103 94 F4            [12]  561 	subb	a,#0xf4
      000105 EF               [12]  562 	mov	a,r7
      000106 64 80            [12]  563 	xrl	a,#0x80
      000108 94 81            [12]  564 	subb	a,#0x81
      00010A 50 07            [24]  565 	jnc	00115$
      00010C 0E               [12]  566 	inc	r6
      00010D BE 00 F1         [24]  567 	cjne	r6,#0x00,00111$
      000110 0F               [12]  568 	inc	r7
      000111 80 EE            [24]  569 	sjmp	00111$
      000113                        570 00115$:
                                    571 ;	main.c:20: for(short i = 0,t=1; i < 4; i++,t*=2) {
      000113 09               [12]  572 	inc	r1
      000114 B9 00 01         [24]  573 	cjne	r1,#0x00,00173$
      000117 0A               [12]  574 	inc	r2
      000118                        575 00173$:
      000118 E5*0E            [12]  576 	mov	a,_display_t_262144_11
      00011A 25*0E            [12]  577 	add	a,_display_t_262144_11
      00011C F5*0E            [12]  578 	mov	_display_t_262144_11,a
      00011E E5*0F            [12]  579 	mov	a,(_display_t_262144_11 + 1)
      000120 33               [12]  580 	rlc	a
      000121 F5*0F            [12]  581 	mov	(_display_t_262144_11 + 1),a
      000123 02r00rA2         [24]  582 	ljmp	00114$
      000126                        583 00108$:
                                    584 ;	main.c:27: for(short i = 0,t=1; i < 4; i++,t*=2) {
      000126 75*10 01         [24]  585 	mov	_display_t_196608_16,#0x01
      000129 75*11 00         [24]  586 	mov	(_display_t_196608_16 + 1),#0x00
      00012C 7C 00            [12]  587 	mov	r4,#0x00
      00012E 7D 00            [12]  588 	mov	r5,#0x00
      000130                        589 00120$:
      000130 C3               [12]  590 	clr	c
      000131 EC               [12]  591 	mov	a,r4
      000132 94 04            [12]  592 	subb	a,#0x04
      000134 ED               [12]  593 	mov	a,r5
      000135 64 80            [12]  594 	xrl	a,#0x80
      000137 94 80            [12]  595 	subb	a,#0x80
      000139 50 78            [24]  596 	jnc	00122$
                                    597 ;	main.c:28: P1 = table[i];
      00013B EC               [12]  598 	mov	a,r4
      00013C 2C               [12]  599 	add	a,r4
      00013D FA               [12]  600 	mov	r2,a
      00013E ED               [12]  601 	mov	a,r5
      00013F 33               [12]  602 	rlc	a
      000140 FB               [12]  603 	mov	r3,a
      000141 EA               [12]  604 	mov	a,r2
      000142 25*0B            [12]  605 	add	a,_display_table_65536_7
      000144 F8               [12]  606 	mov	r0,a
      000145 EB               [12]  607 	mov	a,r3
      000146 35*0C            [12]  608 	addc	a,(_display_table_65536_7 + 1)
      000148 F9               [12]  609 	mov	r1,a
      000149 AF*0D            [24]  610 	mov	r7,(_display_table_65536_7 + 2)
      00014B 88 82            [24]  611 	mov	dpl,r0
      00014D 89 83            [24]  612 	mov	dph,r1
      00014F 8F F0            [24]  613 	mov	b,r7
      000151 12r00r00         [24]  614 	lcall	__gptrget
      000154 F5 90            [12]  615 	mov	_P1,a
                                    616 ;	main.c:29: P2 = alpha[num[i]];
      000156 EA               [12]  617 	mov	a,r2
      000157 25*03            [12]  618 	add	a,_display_PARM_3
      000159 FA               [12]  619 	mov	r2,a
      00015A EB               [12]  620 	mov	a,r3
      00015B 35*04            [12]  621 	addc	a,(_display_PARM_3 + 1)
      00015D FB               [12]  622 	mov	r3,a
      00015E AF*05            [24]  623 	mov	r7,(_display_PARM_3 + 2)
      000160 8A 82            [24]  624 	mov	dpl,r2
      000162 8B 83            [24]  625 	mov	dph,r3
      000164 8F F0            [24]  626 	mov	b,r7
      000166 12r00r00         [24]  627 	lcall	__gptrget
      000169 FA               [12]  628 	mov	r2,a
      00016A A3               [24]  629 	inc	dptr
      00016B 12r00r00         [24]  630 	lcall	__gptrget
      00016E FB               [12]  631 	mov	r3,a
      00016F EA               [12]  632 	mov	a,r2
      000170 2A               [12]  633 	add	a,r2
      000171 FA               [12]  634 	mov	r2,a
      000172 EB               [12]  635 	mov	a,r3
      000173 33               [12]  636 	rlc	a
      000174 FB               [12]  637 	mov	r3,a
      000175 EA               [12]  638 	mov	a,r2
      000176 25*00            [12]  639 	add	a,_display_PARM_2
      000178 FA               [12]  640 	mov	r2,a
      000179 EB               [12]  641 	mov	a,r3
      00017A 35*01            [12]  642 	addc	a,(_display_PARM_2 + 1)
      00017C FB               [12]  643 	mov	r3,a
      00017D AF*02            [24]  644 	mov	r7,(_display_PARM_2 + 2)
      00017F 8A 82            [24]  645 	mov	dpl,r2
      000181 8B 83            [24]  646 	mov	dph,r3
      000183 8F F0            [24]  647 	mov	b,r7
      000185 12r00r00         [24]  648 	lcall	__gptrget
      000188 F5 A0            [12]  649 	mov	_P2,a
                                    650 ;	main.c:30: for(int j = 0; j < 1000; j++){}
      00018A 7E 00            [12]  651 	mov	r6,#0x00
      00018C 7F 00            [12]  652 	mov	r7,#0x00
      00018E                        653 00117$:
      00018E C3               [12]  654 	clr	c
      00018F EE               [12]  655 	mov	a,r6
      000190 94 E8            [12]  656 	subb	a,#0xe8
      000192 EF               [12]  657 	mov	a,r7
      000193 64 80            [12]  658 	xrl	a,#0x80
      000195 94 83            [12]  659 	subb	a,#0x83
      000197 50 07            [24]  660 	jnc	00121$
      000199 0E               [12]  661 	inc	r6
      00019A BE 00 F1         [24]  662 	cjne	r6,#0x00,00117$
      00019D 0F               [12]  663 	inc	r7
      00019E 80 EE            [24]  664 	sjmp	00117$
      0001A0                        665 00121$:
                                    666 ;	main.c:27: for(short i = 0,t=1; i < 4; i++,t*=2) {
      0001A0 0C               [12]  667 	inc	r4
      0001A1 BC 00 01         [24]  668 	cjne	r4,#0x00,00177$
      0001A4 0D               [12]  669 	inc	r5
      0001A5                        670 00177$:
      0001A5 E5*10            [12]  671 	mov	a,_display_t_196608_16
      0001A7 25*10            [12]  672 	add	a,_display_t_196608_16
      0001A9 F5*10            [12]  673 	mov	_display_t_196608_16,a
      0001AB E5*11            [12]  674 	mov	a,(_display_t_196608_16 + 1)
      0001AD 33               [12]  675 	rlc	a
      0001AE F5*11            [12]  676 	mov	(_display_t_196608_16 + 1),a
      0001B0 02r01r30         [24]  677 	ljmp	00120$
      0001B3                        678 00122$:
                                    679 ;	main.c:33: }
      0001B3 22               [24]  680 	ret
                                    681 ;------------------------------------------------------------
                                    682 ;Allocation info for local variables in function 'main'
                                    683 ;------------------------------------------------------------
                                    684 ;previous                  Allocated with name '_main_previous_65536_20'
                                    685 ;row                       Allocated with name '_main_row_65536_20'
                                    686 ;count                     Allocated with name '_main_count_65536_20'
                                    687 ;num                       Allocated with name '_main_num_65536_20'
                                    688 ;alpha                     Allocated with name '_main_alpha_65536_20'
                                    689 ;table                     Allocated with name '_main_table_65536_20'
                                    690 ;index                     Allocated with name '_main_index_65537_21'
                                    691 ;flash_flag                Allocated with name '_main_flash_flag_65537_21'
                                    692 ;isSetting                 Allocated to registers r3 
                                    693 ;key                       Allocated to registers r6 r7 
                                    694 ;------------------------------------------------------------
                                    695 ;	main.c:36: int main() {
                                    696 ;	-----------------------------------------
                                    697 ;	 function main
                                    698 ;	-----------------------------------------
      0001B4                        699 _main:
                                    700 ;	main.c:46: short previous = -1;
      0001B4 75*00 FF         [24]  701 	mov	_main_previous_65536_20,#0xff
      0001B7 75*01 FF         [24]  702 	mov	(_main_previous_65536_20 + 1),#0xff
                                    703 ;	main.c:47: short row = 0;
      0001BA E4               [12]  704 	clr	a
      0001BB F5*02            [12]  705 	mov	_main_row_65536_20,a
      0001BD F5*03            [12]  706 	mov	(_main_row_65536_20 + 1),a
                                    707 ;	main.c:48: short count = 1;
      0001BF 75*04 01         [24]  708 	mov	_main_count_65536_20,#0x01
                                    709 ;	1-genFromRTrack replaced	mov	(_main_count_65536_20 + 1),#0x00
      0001C2 F5*05            [12]  710 	mov	(_main_count_65536_20 + 1),a
                                    711 ;	main.c:49: short num[4] = {0};
      0001C4 F5*06            [12]  712 	mov	(_main_num_65536_20 + 0),a
      0001C6 F5*07            [12]  713 	mov	(_main_num_65536_20 + 1),a
      0001C8 F5*08            [12]  714 	mov	((_main_num_65536_20 + 0x0002) + 0),a
      0001CA F5*09            [12]  715 	mov	((_main_num_65536_20 + 0x0002) + 1),a
      0001CC F5*0A            [12]  716 	mov	((_main_num_65536_20 + 0x0004) + 0),a
      0001CE F5*0B            [12]  717 	mov	((_main_num_65536_20 + 0x0004) + 1),a
      0001D0 F5*0C            [12]  718 	mov	((_main_num_65536_20 + 0x0006) + 0),a
      0001D2 F5*0D            [12]  719 	mov	((_main_num_65536_20 + 0x0006) + 1),a
                                    720 ;	main.c:50: const short alpha[11] = {
      0001D4 75*0E 03         [24]  721 	mov	(_main_alpha_65536_20 + 0),#0x03
                                    722 ;	1-genFromRTrack replaced	mov	(_main_alpha_65536_20 + 1),#0x00
      0001D7 F5*0F            [12]  723 	mov	(_main_alpha_65536_20 + 1),a
      0001D9 75*10 9F         [24]  724 	mov	((_main_alpha_65536_20 + 0x0002) + 0),#0x9f
                                    725 ;	1-genFromRTrack replaced	mov	((_main_alpha_65536_20 + 0x0002) + 1),#0x00
      0001DC F5*11            [12]  726 	mov	((_main_alpha_65536_20 + 0x0002) + 1),a
      0001DE 75*12 25         [24]  727 	mov	((_main_alpha_65536_20 + 0x0004) + 0),#0x25
                                    728 ;	1-genFromRTrack replaced	mov	((_main_alpha_65536_20 + 0x0004) + 1),#0x00
      0001E1 F5*13            [12]  729 	mov	((_main_alpha_65536_20 + 0x0004) + 1),a
      0001E3 75*14 0D         [24]  730 	mov	((_main_alpha_65536_20 + 0x0006) + 0),#0x0d
                                    731 ;	1-genFromRTrack replaced	mov	((_main_alpha_65536_20 + 0x0006) + 1),#0x00
      0001E6 F5*15            [12]  732 	mov	((_main_alpha_65536_20 + 0x0006) + 1),a
      0001E8 75*16 99         [24]  733 	mov	((_main_alpha_65536_20 + 0x0008) + 0),#0x99
                                    734 ;	1-genFromRTrack replaced	mov	((_main_alpha_65536_20 + 0x0008) + 1),#0x00
      0001EB F5*17            [12]  735 	mov	((_main_alpha_65536_20 + 0x0008) + 1),a
      0001ED 75*18 49         [24]  736 	mov	((_main_alpha_65536_20 + 0x000a) + 0),#0x49
                                    737 ;	1-genFromRTrack replaced	mov	((_main_alpha_65536_20 + 0x000a) + 1),#0x00
      0001F0 F5*19            [12]  738 	mov	((_main_alpha_65536_20 + 0x000a) + 1),a
      0001F2 75*1A 41         [24]  739 	mov	((_main_alpha_65536_20 + 0x000c) + 0),#0x41
                                    740 ;	1-genFromRTrack replaced	mov	((_main_alpha_65536_20 + 0x000c) + 1),#0x00
      0001F5 F5*1B            [12]  741 	mov	((_main_alpha_65536_20 + 0x000c) + 1),a
      0001F7 75*1C 1F         [24]  742 	mov	((_main_alpha_65536_20 + 0x000e) + 0),#0x1f
                                    743 ;	1-genFromRTrack replaced	mov	((_main_alpha_65536_20 + 0x000e) + 1),#0x00
      0001FA F5*1D            [12]  744 	mov	((_main_alpha_65536_20 + 0x000e) + 1),a
      0001FC 75*1E 01         [24]  745 	mov	((_main_alpha_65536_20 + 0x0010) + 0),#0x01
                                    746 ;	1-genFromRTrack replaced	mov	((_main_alpha_65536_20 + 0x0010) + 1),#0x00
      0001FF F5*1F            [12]  747 	mov	((_main_alpha_65536_20 + 0x0010) + 1),a
      000201 75*20 09         [24]  748 	mov	((_main_alpha_65536_20 + 0x0012) + 0),#0x09
                                    749 ;	1-genFromRTrack replaced	mov	((_main_alpha_65536_20 + 0x0012) + 1),#0x00
      000204 F5*21            [12]  750 	mov	((_main_alpha_65536_20 + 0x0012) + 1),a
      000206 75*22 FF         [24]  751 	mov	((_main_alpha_65536_20 + 0x0014) + 0),#0xff
                                    752 ;	1-genFromRTrack replaced	mov	((_main_alpha_65536_20 + 0x0014) + 1),#0x00
      000209 F5*23            [12]  753 	mov	((_main_alpha_65536_20 + 0x0014) + 1),a
                                    754 ;	main.c:63: const short table[4] = {
      00020B 75*24 FE         [24]  755 	mov	(_main_table_65536_20 + 0),#0xfe
                                    756 ;	1-genFromRTrack replaced	mov	(_main_table_65536_20 + 1),#0x00
      00020E F5*25            [12]  757 	mov	(_main_table_65536_20 + 1),a
      000210 75*26 FD         [24]  758 	mov	((_main_table_65536_20 + 0x0002) + 0),#0xfd
                                    759 ;	1-genFromRTrack replaced	mov	((_main_table_65536_20 + 0x0002) + 1),#0x00
      000213 F5*27            [12]  760 	mov	((_main_table_65536_20 + 0x0002) + 1),a
      000215 75*28 FB         [24]  761 	mov	((_main_table_65536_20 + 0x0004) + 0),#0xfb
                                    762 ;	1-genFromRTrack replaced	mov	((_main_table_65536_20 + 0x0004) + 1),#0x00
      000218 F5*29            [12]  763 	mov	((_main_table_65536_20 + 0x0004) + 1),a
      00021A 75*2A F7         [24]  764 	mov	((_main_table_65536_20 + 0x0006) + 0),#0xf7
                                    765 ;	1-genFromRTrack replaced	mov	((_main_table_65536_20 + 0x0006) + 1),#0x00
      00021D F5*2B            [12]  766 	mov	((_main_table_65536_20 + 0x0006) + 1),a
                                    767 ;	main.c:69: P0 = 0b00001111;
      00021F 75 80 0F         [24]  768 	mov	_P0,#0x0f
                                    769 ;	main.c:70: short index = 0;
      000222 F5*2C            [12]  770 	mov	_main_index_65537_21,a
      000224 F5*2D            [12]  771 	mov	(_main_index_65537_21 + 1),a
                                    772 ;	main.c:71: long flash_flag = 0;
      000226 F5*2E            [12]  773 	mov	_main_flash_flag_65537_21,a
      000228 F5*2F            [12]  774 	mov	(_main_flash_flag_65537_21 + 1),a
      00022A F5*30            [12]  775 	mov	(_main_flash_flag_65537_21 + 2),a
      00022C F5*31            [12]  776 	mov	(_main_flash_flag_65537_21 + 3),a
                                    777 ;	main.c:72: bool isSetting = false;
      00022E 7B 00            [12]  778 	mov	r3,#0x00
                                    779 ;	main.c:74: while (1) {
      000230                        780 00118$:
                                    781 ;	main.c:75: flash_flag++;
      000230 05*2E            [12]  782 	inc	_main_flash_flag_65537_21
      000232 E4               [12]  783 	clr	a
      000233 B5*2E 0C         [24]  784 	cjne	a,_main_flash_flag_65537_21,00162$
      000236 05*2F            [12]  785 	inc	(_main_flash_flag_65537_21 + 1)
      000238 B5*2F 07         [24]  786 	cjne	a,(_main_flash_flag_65537_21 + 1),00162$
      00023B 05*30            [12]  787 	inc	(_main_flash_flag_65537_21 + 2)
      00023D B5*30 02         [24]  788 	cjne	a,(_main_flash_flag_65537_21 + 2),00162$
      000240 05*31            [12]  789 	inc	(_main_flash_flag_65537_21 + 3)
      000242                        790 00162$:
                                    791 ;	main.c:76: if (flash_flag >= 8000) 
      000242 C3               [12]  792 	clr	c
      000243 E5*2E            [12]  793 	mov	a,_main_flash_flag_65537_21
      000245 94 40            [12]  794 	subb	a,#0x40
      000247 E5*2F            [12]  795 	mov	a,(_main_flash_flag_65537_21 + 1)
      000249 94 1F            [12]  796 	subb	a,#0x1f
      00024B E5*30            [12]  797 	mov	a,(_main_flash_flag_65537_21 + 2)
      00024D 94 00            [12]  798 	subb	a,#0x00
      00024F E5*31            [12]  799 	mov	a,(_main_flash_flag_65537_21 + 3)
      000251 64 80            [12]  800 	xrl	a,#0x80
      000253 94 80            [12]  801 	subb	a,#0x80
      000255 40 09            [24]  802 	jc	00102$
                                    803 ;	main.c:77: flash_flag = 0;
      000257 E4               [12]  804 	clr	a
      000258 F5*2E            [12]  805 	mov	_main_flash_flag_65537_21,a
      00025A F5*2F            [12]  806 	mov	(_main_flash_flag_65537_21 + 1),a
      00025C F5*30            [12]  807 	mov	(_main_flash_flag_65537_21 + 2),a
      00025E F5*31            [12]  808 	mov	(_main_flash_flag_65537_21 + 3),a
      000260                        809 00102$:
                                    810 ;	main.c:78: P0     =count^0b11111111;
      000260 74 FF            [12]  811 	mov	a,#0xff
      000262 65*04            [12]  812 	xrl	a,_main_count_65536_20
      000264 FA               [12]  813 	mov	r2,a
      000265 8A 80            [24]  814 	mov	_P0,r2
                                    815 ;	main.c:79: count *=2; //shift
      000267 E5*04            [12]  816 	mov	a,_main_count_65536_20
      000269 25*04            [12]  817 	add	a,_main_count_65536_20
      00026B F5*04            [12]  818 	mov	_main_count_65536_20,a
      00026D E5*05            [12]  819 	mov	a,(_main_count_65536_20 + 1)
      00026F 33               [12]  820 	rlc	a
      000270 F5*05            [12]  821 	mov	(_main_count_65536_20 + 1),a
                                    822 ;	main.c:80: short key = keyPressed(row);
      000272 85*02 82         [24]  823 	mov	dpl,_main_row_65536_20
      000275 85*03 83         [24]  824 	mov	dph,(_main_row_65536_20 + 1)
      000278 C0 03            [24]  825 	push	ar3
      00027A 12r00r00         [24]  826 	lcall	_keyPressed
      00027D AE 82            [24]  827 	mov	r6,dpl
      00027F AF 83            [24]  828 	mov	r7,dph
      000281 D0 03            [24]  829 	pop	ar3
                                    830 ;	main.c:81: if (key != previous && key != -1) {	//有按且不等於上一按 => 處理debounce
      000283 EE               [12]  831 	mov	a,r6
      000284 B5*00 06         [24]  832 	cjne	a,_main_previous_65536_20,00164$
      000287 EF               [12]  833 	mov	a,r7
      000288 B5*01 02         [24]  834 	cjne	a,(_main_previous_65536_20 + 1),00164$
      00028B 80 57            [24]  835 	sjmp	00113$
      00028D                        836 00164$:
      00028D BE FF 05         [24]  837 	cjne	r6,#0xff,00165$
      000290 BF FF 02         [24]  838 	cjne	r7,#0xff,00165$
      000293 80 4F            [24]  839 	sjmp	00113$
      000295                        840 00165$:
                                    841 ;	main.c:82: previous = key;
      000295 8E*00            [24]  842 	mov	_main_previous_65536_20,r6
      000297 8F*01            [24]  843 	mov	(_main_previous_65536_20 + 1),r7
                                    844 ;	main.c:87: if (key == 10) {
      000299 BE 0A 05         [24]  845 	cjne	r6,#0x0a,00104$
      00029C BF 00 02         [24]  846 	cjne	r7,#0x00,00104$
                                    847 ;	main.c:88: isSetting = true;
      00029F 7B 01            [12]  848 	mov	r3,#0x01
      0002A1                        849 00104$:
                                    850 ;	main.c:91: if (isSetting) {
      0002A1 EB               [12]  851 	mov	a,r3
      0002A2 60 40            [24]  852 	jz	00113$
                                    853 ;	main.c:93: if (key >= 0 && key <= 9)
      0002A4 EF               [12]  854 	mov	a,r7
      0002A5 20 E7 2A         [24]  855 	jb	acc.7,00106$
      0002A8 C3               [12]  856 	clr	c
      0002A9 74 09            [12]  857 	mov	a,#0x09
      0002AB 9E               [12]  858 	subb	a,r6
      0002AC 74 80            [12]  859 	mov	a,#(0x00 ^ 0x80)
      0002AE 8F F0            [24]  860 	mov	b,r7
      0002B0 63 F0 80         [24]  861 	xrl	b,#0x80
      0002B3 95 F0            [12]  862 	subb	a,b
      0002B5 40 1B            [24]  863 	jc	00106$
                                    864 ;	main.c:94: num[index++] = key;
      0002B7 AC*2C            [24]  865 	mov	r4,_main_index_65537_21
      0002B9 AD*2D            [24]  866 	mov	r5,(_main_index_65537_21 + 1)
      0002BB 05*2C            [12]  867 	inc	_main_index_65537_21
      0002BD E4               [12]  868 	clr	a
      0002BE B5*2C 02         [24]  869 	cjne	a,_main_index_65537_21,00171$
      0002C1 05*2D            [12]  870 	inc	(_main_index_65537_21 + 1)
      0002C3                        871 00171$:
      0002C3 EC               [12]  872 	mov	a,r4
      0002C4 2C               [12]  873 	add	a,r4
      0002C5 FC               [12]  874 	mov	r4,a
      0002C6 ED               [12]  875 	mov	a,r5
      0002C7 33               [12]  876 	rlc	a
      0002C8 FD               [12]  877 	mov	r5,a
      0002C9 EC               [12]  878 	mov	a,r4
      0002CA 24r06            [12]  879 	add	a,#_main_num_65536_20
      0002CC F8               [12]  880 	mov	r0,a
      0002CD A6 06            [24]  881 	mov	@r0,ar6
      0002CF 08               [12]  882 	inc	r0
      0002D0 A6 07            [24]  883 	mov	@r0,ar7
      0002D2                        884 00106$:
                                    885 ;	main.c:95: if (index == 4) index = 0;
      0002D2 74 04            [12]  886 	mov	a,#0x04
      0002D4 B5*2C 06         [24]  887 	cjne	a,_main_index_65537_21,00172$
      0002D7 E4               [12]  888 	clr	a
      0002D8 B5*2D 02         [24]  889 	cjne	a,(_main_index_65537_21 + 1),00172$
      0002DB 80 02            [24]  890 	sjmp	00173$
      0002DD                        891 00172$:
      0002DD 80 05            [24]  892 	sjmp	00113$
      0002DF                        893 00173$:
      0002DF E4               [12]  894 	clr	a
      0002E0 F5*2C            [12]  895 	mov	_main_index_65537_21,a
      0002E2 F5*2D            [12]  896 	mov	(_main_index_65537_21 + 1),a
      0002E4                        897 00113$:
                                    898 ;	main.c:100: row++;
      0002E4 05*02            [12]  899 	inc	_main_row_65536_20
      0002E6 E4               [12]  900 	clr	a
      0002E7 B5*02 02         [24]  901 	cjne	a,_main_row_65536_20,00174$
      0002EA 05*03            [12]  902 	inc	(_main_row_65536_20 + 1)
      0002EC                        903 00174$:
                                    904 ;	main.c:101: if (count == 0x10) {	//用count從上往下掃 
      0002EC 74 10            [12]  905 	mov	a,#0x10
      0002EE B5*04 06         [24]  906 	cjne	a,_main_count_65536_20,00175$
      0002F1 E4               [12]  907 	clr	a
      0002F2 B5*05 02         [24]  908 	cjne	a,(_main_count_65536_20 + 1),00175$
      0002F5 80 02            [24]  909 	sjmp	00176$
      0002F7                        910 00175$:
      0002F7 80 0D            [24]  911 	sjmp	00116$
      0002F9                        912 00176$:
                                    913 ;	main.c:102: count = 1;
      0002F9 75*04 01         [24]  914 	mov	_main_count_65536_20,#0x01
                                    915 ;	main.c:103: row   = 0;
      0002FC E4               [12]  916 	clr	a
      0002FD F5*05            [12]  917 	mov	(_main_count_65536_20 + 1),a
      0002FF F5*02            [12]  918 	mov	_main_row_65536_20,a
      000301 F5*03            [12]  919 	mov	(_main_row_65536_20 + 1),a
                                    920 ;	main.c:104: P1 = 0b11111111;
      000303 75 90 FF         [24]  921 	mov	_P1,#0xff
      000306                        922 00116$:
                                    923 ;	main.c:106: display(table, alpha, num, isSetting, flash_flag);
      000306 75*00r0E         [24]  924 	mov	_display_PARM_2,#_main_alpha_65536_20
      000309 75*01 00         [24]  925 	mov	(_display_PARM_2 + 1),#0x00
      00030C 75*02 40         [24]  926 	mov	(_display_PARM_2 + 2),#0x40
      00030F 75*03r06         [24]  927 	mov	_display_PARM_3,#_main_num_65536_20
      000312 75*04 00         [24]  928 	mov	(_display_PARM_3 + 1),#0x00
      000315 75*05 40         [24]  929 	mov	(_display_PARM_3 + 2),#0x40
      000318 8B*06            [24]  930 	mov	_display_PARM_4,r3
      00031A 85*2E*07         [24]  931 	mov	_display_PARM_5,_main_flash_flag_65537_21
      00031D 85*2F*08         [24]  932 	mov	(_display_PARM_5 + 1),(_main_flash_flag_65537_21 + 1)
      000320 85*30*09         [24]  933 	mov	(_display_PARM_5 + 2),(_main_flash_flag_65537_21 + 2)
      000323 85*31*0A         [24]  934 	mov	(_display_PARM_5 + 3),(_main_flash_flag_65537_21 + 3)
      000326 90r00r24         [24]  935 	mov	dptr,#_main_table_65536_20
      000329 75 F0 40         [24]  936 	mov	b,#0x40
      00032C C0 03            [24]  937 	push	ar3
      00032E 12r00r6F         [24]  938 	lcall	_display
      000331 D0 03            [24]  939 	pop	ar3
                                    940 ;	main.c:109: }
      000333 02r02r30         [24]  941 	ljmp	00118$
                                    942 	.area CSEG    (CODE)
                                    943 	.area CONST   (CODE)
                                    944 	.area XINIT   (CODE)
                                    945 	.area CABS    (ABS,CODE)
