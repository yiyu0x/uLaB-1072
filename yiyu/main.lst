                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _display_PARM_5
                                     12 	.globl _display_PARM_4
                                     13 	.globl _display_PARM_3
                                     14 	.globl _display_PARM_2
                                     15 	.globl _main
                                     16 	.globl _check_sound_trigger
                                     17 	.globl _display
                                     18 	.globl _keyPressed
                                     19 	.globl _timer1
                                     20 	.globl _timer_isr
                                     21 	.globl _run_clock
                                     22 	.globl _CY
                                     23 	.globl _AC
                                     24 	.globl _F0
                                     25 	.globl _RS1
                                     26 	.globl _RS0
                                     27 	.globl _OV
                                     28 	.globl _F1
                                     29 	.globl _P
                                     30 	.globl _PS
                                     31 	.globl _PT1
                                     32 	.globl _PX1
                                     33 	.globl _PT0
                                     34 	.globl _PX0
                                     35 	.globl _RD
                                     36 	.globl _WR
                                     37 	.globl _T1
                                     38 	.globl _T0
                                     39 	.globl _INT1
                                     40 	.globl _INT0
                                     41 	.globl _TXD
                                     42 	.globl _RXD
                                     43 	.globl _P3_7
                                     44 	.globl _P3_6
                                     45 	.globl _P3_5
                                     46 	.globl _P3_4
                                     47 	.globl _P3_3
                                     48 	.globl _P3_2
                                     49 	.globl _P3_1
                                     50 	.globl _P3_0
                                     51 	.globl _EA
                                     52 	.globl _ES
                                     53 	.globl _ET1
                                     54 	.globl _EX1
                                     55 	.globl _ET0
                                     56 	.globl _EX0
                                     57 	.globl _P2_7
                                     58 	.globl _P2_6
                                     59 	.globl _P2_5
                                     60 	.globl _P2_4
                                     61 	.globl _P2_3
                                     62 	.globl _P2_2
                                     63 	.globl _P2_1
                                     64 	.globl _P2_0
                                     65 	.globl _SM0
                                     66 	.globl _SM1
                                     67 	.globl _SM2
                                     68 	.globl _REN
                                     69 	.globl _TB8
                                     70 	.globl _RB8
                                     71 	.globl _TI
                                     72 	.globl _RI
                                     73 	.globl _P1_7
                                     74 	.globl _P1_6
                                     75 	.globl _P1_5
                                     76 	.globl _P1_4
                                     77 	.globl _P1_3
                                     78 	.globl _P1_2
                                     79 	.globl _P1_1
                                     80 	.globl _P1_0
                                     81 	.globl _TF1
                                     82 	.globl _TR1
                                     83 	.globl _TF0
                                     84 	.globl _TR0
                                     85 	.globl _IE1
                                     86 	.globl _IT1
                                     87 	.globl _IE0
                                     88 	.globl _IT0
                                     89 	.globl _P0_7
                                     90 	.globl _P0_6
                                     91 	.globl _P0_5
                                     92 	.globl _P0_4
                                     93 	.globl _P0_3
                                     94 	.globl _P0_2
                                     95 	.globl _P0_1
                                     96 	.globl _P0_0
                                     97 	.globl _B
                                     98 	.globl _ACC
                                     99 	.globl _PSW
                                    100 	.globl _IP
                                    101 	.globl _P3
                                    102 	.globl _IE
                                    103 	.globl _P2
                                    104 	.globl _SBUF
                                    105 	.globl _SCON
                                    106 	.globl _P1
                                    107 	.globl _TH1
                                    108 	.globl _TH0
                                    109 	.globl _TL1
                                    110 	.globl _TL0
                                    111 	.globl _TMOD
                                    112 	.globl _TCON
                                    113 	.globl _PCON
                                    114 	.globl _DPH
                                    115 	.globl _DPL
                                    116 	.globl _SP
                                    117 	.globl _P0
                                    118 	.globl _counter
                                    119 ;--------------------------------------------------------
                                    120 ; special function registers
                                    121 ;--------------------------------------------------------
                                    122 	.area RSEG    (ABS,DATA)
      000000                        123 	.org 0x0000
                           000080   124 _P0	=	0x0080
                           000081   125 _SP	=	0x0081
                           000082   126 _DPL	=	0x0082
                           000083   127 _DPH	=	0x0083
                           000087   128 _PCON	=	0x0087
                           000088   129 _TCON	=	0x0088
                           000089   130 _TMOD	=	0x0089
                           00008A   131 _TL0	=	0x008a
                           00008B   132 _TL1	=	0x008b
                           00008C   133 _TH0	=	0x008c
                           00008D   134 _TH1	=	0x008d
                           000090   135 _P1	=	0x0090
                           000098   136 _SCON	=	0x0098
                           000099   137 _SBUF	=	0x0099
                           0000A0   138 _P2	=	0x00a0
                           0000A8   139 _IE	=	0x00a8
                           0000B0   140 _P3	=	0x00b0
                           0000B8   141 _IP	=	0x00b8
                           0000D0   142 _PSW	=	0x00d0
                           0000E0   143 _ACC	=	0x00e0
                           0000F0   144 _B	=	0x00f0
                                    145 ;--------------------------------------------------------
                                    146 ; special function bits
                                    147 ;--------------------------------------------------------
                                    148 	.area RSEG    (ABS,DATA)
      000000                        149 	.org 0x0000
                           000080   150 _P0_0	=	0x0080
                           000081   151 _P0_1	=	0x0081
                           000082   152 _P0_2	=	0x0082
                           000083   153 _P0_3	=	0x0083
                           000084   154 _P0_4	=	0x0084
                           000085   155 _P0_5	=	0x0085
                           000086   156 _P0_6	=	0x0086
                           000087   157 _P0_7	=	0x0087
                           000088   158 _IT0	=	0x0088
                           000089   159 _IE0	=	0x0089
                           00008A   160 _IT1	=	0x008a
                           00008B   161 _IE1	=	0x008b
                           00008C   162 _TR0	=	0x008c
                           00008D   163 _TF0	=	0x008d
                           00008E   164 _TR1	=	0x008e
                           00008F   165 _TF1	=	0x008f
                           000090   166 _P1_0	=	0x0090
                           000091   167 _P1_1	=	0x0091
                           000092   168 _P1_2	=	0x0092
                           000093   169 _P1_3	=	0x0093
                           000094   170 _P1_4	=	0x0094
                           000095   171 _P1_5	=	0x0095
                           000096   172 _P1_6	=	0x0096
                           000097   173 _P1_7	=	0x0097
                           000098   174 _RI	=	0x0098
                           000099   175 _TI	=	0x0099
                           00009A   176 _RB8	=	0x009a
                           00009B   177 _TB8	=	0x009b
                           00009C   178 _REN	=	0x009c
                           00009D   179 _SM2	=	0x009d
                           00009E   180 _SM1	=	0x009e
                           00009F   181 _SM0	=	0x009f
                           0000A0   182 _P2_0	=	0x00a0
                           0000A1   183 _P2_1	=	0x00a1
                           0000A2   184 _P2_2	=	0x00a2
                           0000A3   185 _P2_3	=	0x00a3
                           0000A4   186 _P2_4	=	0x00a4
                           0000A5   187 _P2_5	=	0x00a5
                           0000A6   188 _P2_6	=	0x00a6
                           0000A7   189 _P2_7	=	0x00a7
                           0000A8   190 _EX0	=	0x00a8
                           0000A9   191 _ET0	=	0x00a9
                           0000AA   192 _EX1	=	0x00aa
                           0000AB   193 _ET1	=	0x00ab
                           0000AC   194 _ES	=	0x00ac
                           0000AF   195 _EA	=	0x00af
                           0000B0   196 _P3_0	=	0x00b0
                           0000B1   197 _P3_1	=	0x00b1
                           0000B2   198 _P3_2	=	0x00b2
                           0000B3   199 _P3_3	=	0x00b3
                           0000B4   200 _P3_4	=	0x00b4
                           0000B5   201 _P3_5	=	0x00b5
                           0000B6   202 _P3_6	=	0x00b6
                           0000B7   203 _P3_7	=	0x00b7
                           0000B0   204 _RXD	=	0x00b0
                           0000B1   205 _TXD	=	0x00b1
                           0000B2   206 _INT0	=	0x00b2
                           0000B3   207 _INT1	=	0x00b3
                           0000B4   208 _T0	=	0x00b4
                           0000B5   209 _T1	=	0x00b5
                           0000B6   210 _WR	=	0x00b6
                           0000B7   211 _RD	=	0x00b7
                           0000B8   212 _PX0	=	0x00b8
                           0000B9   213 _PT0	=	0x00b9
                           0000BA   214 _PX1	=	0x00ba
                           0000BB   215 _PT1	=	0x00bb
                           0000BC   216 _PS	=	0x00bc
                           0000D0   217 _P	=	0x00d0
                           0000D1   218 _F1	=	0x00d1
                           0000D2   219 _OV	=	0x00d2
                           0000D3   220 _RS0	=	0x00d3
                           0000D4   221 _RS1	=	0x00d4
                           0000D5   222 _F0	=	0x00d5
                           0000D6   223 _AC	=	0x00d6
                           0000D7   224 _CY	=	0x00d7
                                    225 ;--------------------------------------------------------
                                    226 ; overlayable register banks
                                    227 ;--------------------------------------------------------
                                    228 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        229 	.ds 8
                                    230 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        231 	.ds 8
                                    232 	.area REG_BANK_2	(REL,OVR,DATA)
      000000                        233 	.ds 8
                                    234 ;--------------------------------------------------------
                                    235 ; internal ram data
                                    236 ;--------------------------------------------------------
                                    237 	.area DSEG    (DATA)
      000000                        238 _counter::
      000000                        239 	.ds 2
      000002                        240 _main_previous_65537_32:
      000002                        241 	.ds 2
      000004                        242 _main_row_65537_32:
      000004                        243 	.ds 2
      000006                        244 _main_count_65537_32:
      000006                        245 	.ds 2
      000008                        246 _main_num_65537_32:
      000008                        247 	.ds 8
      000010                        248 _main_num_bi_65537_32:
      000010                        249 	.ds 8
      000018                        250 _main_alpha_65537_32:
      000018                        251 	.ds 22
      00002E                        252 _main_table_65537_32:
      00002E                        253 	.ds 8
      000036                        254 _main_index_65538_33:
      000036                        255 	.ds 2
      000038                        256 _main_flash_flag_65538_33:
      000038                        257 	.ds 4
                                    258 ;--------------------------------------------------------
                                    259 ; overlayable items in internal ram 
                                    260 ;--------------------------------------------------------
                                    261 	.area	OSEG    (OVR,DATA)
      000000                        262 _run_clock_sloc0_1_0:
      000000                        263 	.ds 3
                                    264 	.area	OSEG    (OVR,DATA)
      000000                        265 _keyPressed_row_65536_11:
      000000                        266 	.ds 2
                                    267 	.area	OSEG    (OVR,DATA)
      000000                        268 _display_PARM_2:
      000000                        269 	.ds 3
      000003                        270 _display_PARM_3:
      000003                        271 	.ds 3
      000006                        272 _display_PARM_4:
      000006                        273 	.ds 1
      000007                        274 _display_PARM_5:
      000007                        275 	.ds 4
      00000B                        276 _display_table_65536_17:
      00000B                        277 	.ds 3
      00000E                        278 _display_t_262144_21:
      00000E                        279 	.ds 2
      000010                        280 _display_t_196608_26:
      000010                        281 	.ds 2
                                    282 ;--------------------------------------------------------
                                    283 ; Stack segment in internal ram 
                                    284 ;--------------------------------------------------------
                                    285 	.area	SSEG
      000000                        286 __start__stack:
      000000                        287 	.ds	1
                                    288 
                                    289 ;--------------------------------------------------------
                                    290 ; indirectly addressable internal ram data
                                    291 ;--------------------------------------------------------
                                    292 	.area ISEG    (DATA)
                                    293 ;--------------------------------------------------------
                                    294 ; absolute internal ram data
                                    295 ;--------------------------------------------------------
                                    296 	.area IABS    (ABS,DATA)
                                    297 	.area IABS    (ABS,DATA)
                                    298 ;--------------------------------------------------------
                                    299 ; bit data
                                    300 ;--------------------------------------------------------
                                    301 	.area BSEG    (BIT)
                                    302 ;--------------------------------------------------------
                                    303 ; paged external ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area PSEG    (PAG,XDATA)
                                    306 ;--------------------------------------------------------
                                    307 ; external ram data
                                    308 ;--------------------------------------------------------
                                    309 	.area XSEG    (XDATA)
                                    310 ;--------------------------------------------------------
                                    311 ; absolute external ram data
                                    312 ;--------------------------------------------------------
                                    313 	.area XABS    (ABS,XDATA)
                                    314 ;--------------------------------------------------------
                                    315 ; external initialized ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area XISEG   (XDATA)
                                    318 	.area HOME    (CODE)
                                    319 	.area GSINIT0 (CODE)
                                    320 	.area GSINIT1 (CODE)
                                    321 	.area GSINIT2 (CODE)
                                    322 	.area GSINIT3 (CODE)
                                    323 	.area GSINIT4 (CODE)
                                    324 	.area GSINIT5 (CODE)
                                    325 	.area GSINIT  (CODE)
                                    326 	.area GSFINAL (CODE)
                                    327 	.area CSEG    (CODE)
                                    328 ;--------------------------------------------------------
                                    329 ; interrupt vector 
                                    330 ;--------------------------------------------------------
                                    331 	.area HOME    (CODE)
      000000                        332 __interrupt_vect:
      000000 02r00r00         [24]  333 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  334 	reti
      000004                        335 	.ds	7
      00000B 02r01r1D         [24]  336 	ljmp	_timer_isr
      00000E                        337 	.ds	5
      000013 32               [24]  338 	reti
      000014                        339 	.ds	7
      00001B 02r01r34         [24]  340 	ljmp	_timer1
                                    341 ;--------------------------------------------------------
                                    342 ; global & static initialisations
                                    343 ;--------------------------------------------------------
                                    344 	.area HOME    (CODE)
                                    345 	.area GSINIT  (CODE)
                                    346 	.area GSFINAL (CODE)
                                    347 	.area GSINIT  (CODE)
                                    348 	.globl __sdcc_gsinit_startup
                                    349 	.globl __sdcc_program_startup
                                    350 	.globl __start__stack
                                    351 	.globl __mcs51_genXINIT
                                    352 	.globl __mcs51_genXRAMCLEAR
                                    353 	.globl __mcs51_genRAMCLEAR
                                    354 ;	main.c:5: short counter = 0;
      000000 E4               [12]  355 	clr	a
      000001 F5*00            [12]  356 	mov	_counter,a
      000003 F5*01            [12]  357 	mov	(_counter + 1),a
                                    358 	.area GSFINAL (CODE)
      000000 02r00r1E         [24]  359 	ljmp	__sdcc_program_startup
                                    360 ;--------------------------------------------------------
                                    361 ; Home
                                    362 ;--------------------------------------------------------
                                    363 	.area HOME    (CODE)
                                    364 	.area HOME    (CODE)
      00001E                        365 __sdcc_program_startup:
      00001E 02r02rFA         [24]  366 	ljmp	_main
                                    367 ;	return from main will return to caller
                                    368 ;--------------------------------------------------------
                                    369 ; code
                                    370 ;--------------------------------------------------------
                                    371 	.area CSEG    (CODE)
                                    372 ;------------------------------------------------------------
                                    373 ;Allocation info for local variables in function 'run_clock'
                                    374 ;------------------------------------------------------------
                                    375 ;num                       Allocated to registers r5 r6 r7 
                                    376 ;sloc0                     Allocated with name '_run_clock_sloc0_1_0'
                                    377 ;------------------------------------------------------------
                                    378 ;	main.c:8: void run_clock(short num[]) {
                                    379 ;	-----------------------------------------
                                    380 ;	 function run_clock
                                    381 ;	-----------------------------------------
      000000                        382 _run_clock:
                           000007   383 	ar7 = 0x07
                           000006   384 	ar6 = 0x06
                           000005   385 	ar5 = 0x05
                           000004   386 	ar4 = 0x04
                           000003   387 	ar3 = 0x03
                           000002   388 	ar2 = 0x02
                           000001   389 	ar1 = 0x01
                           000000   390 	ar0 = 0x00
      000000 AD 82            [24]  391 	mov	r5,dpl
      000002 AE 83            [24]  392 	mov	r6,dph
      000004 AF F0            [24]  393 	mov	r7,b
                                    394 ;	main.c:9: if (counter >= 20) {
      000006 C3               [12]  395 	clr	c
      000007 E5*00            [12]  396 	mov	a,_counter
      000009 94 14            [12]  397 	subb	a,#0x14
      00000B E5*01            [12]  398 	mov	a,(_counter + 1)
      00000D 64 80            [12]  399 	xrl	a,#0x80
      00000F 94 80            [12]  400 	subb	a,#0x80
      000011 50 01            [24]  401 	jnc	00127$
      000013 22               [24]  402 	ret
      000014                        403 00127$:
                                    404 ;	main.c:10: num[3]++;
      000014 74 06            [12]  405 	mov	a,#0x06
      000016 2D               [12]  406 	add	a,r5
      000017 FA               [12]  407 	mov	r2,a
      000018 E4               [12]  408 	clr	a
      000019 3E               [12]  409 	addc	a,r6
      00001A FB               [12]  410 	mov	r3,a
      00001B 8F 04            [24]  411 	mov	ar4,r7
      00001D 8A 82            [24]  412 	mov	dpl,r2
      00001F 8B 83            [24]  413 	mov	dph,r3
      000021 8C F0            [24]  414 	mov	b,r4
      000023 12r00r00         [24]  415 	lcall	__gptrget
      000026 F8               [12]  416 	mov	r0,a
      000027 A3               [24]  417 	inc	dptr
      000028 12r00r00         [24]  418 	lcall	__gptrget
      00002B F9               [12]  419 	mov	r1,a
      00002C 08               [12]  420 	inc	r0
      00002D B8 00 01         [24]  421 	cjne	r0,#0x00,00128$
      000030 09               [12]  422 	inc	r1
      000031                        423 00128$:
      000031 8A 82            [24]  424 	mov	dpl,r2
      000033 8B 83            [24]  425 	mov	dph,r3
      000035 8C F0            [24]  426 	mov	b,r4
      000037 E8               [12]  427 	mov	a,r0
      000038 12r00r00         [24]  428 	lcall	__gptrput
      00003B A3               [24]  429 	inc	dptr
      00003C E9               [12]  430 	mov	a,r1
      00003D 12r00r00         [24]  431 	lcall	__gptrput
                                    432 ;	main.c:11: counter = 0;
      000040 E4               [12]  433 	clr	a
      000041 F5*00            [12]  434 	mov	_counter,a
      000043 F5*01            [12]  435 	mov	(_counter + 1),a
                                    436 ;	main.c:12: if (num[3] == 10) {
      000045 8A 82            [24]  437 	mov	dpl,r2
      000047 8B 83            [24]  438 	mov	dph,r3
      000049 8C F0            [24]  439 	mov	b,r4
      00004B 12r00r00         [24]  440 	lcall	__gptrget
      00004E F8               [12]  441 	mov	r0,a
      00004F A3               [24]  442 	inc	dptr
      000050 12r00r00         [24]  443 	lcall	__gptrget
      000053 F9               [12]  444 	mov	r1,a
      000054 B8 0A 05         [24]  445 	cjne	r0,#0x0a,00129$
      000057 B9 00 02         [24]  446 	cjne	r1,#0x00,00129$
      00005A 80 01            [24]  447 	sjmp	00130$
      00005C                        448 00129$:
      00005C 22               [24]  449 	ret
      00005D                        450 00130$:
                                    451 ;	main.c:13: num[3] = 0;
      00005D 8A 82            [24]  452 	mov	dpl,r2
      00005F 8B 83            [24]  453 	mov	dph,r3
      000061 8C F0            [24]  454 	mov	b,r4
      000063 E4               [12]  455 	clr	a
      000064 12r00r00         [24]  456 	lcall	__gptrput
      000067 A3               [24]  457 	inc	dptr
      000068 12r00r00         [24]  458 	lcall	__gptrput
                                    459 ;	main.c:14: num[2]++;
      00006B 74 04            [12]  460 	mov	a,#0x04
      00006D 2D               [12]  461 	add	a,r5
      00006E FA               [12]  462 	mov	r2,a
      00006F E4               [12]  463 	clr	a
      000070 3E               [12]  464 	addc	a,r6
      000071 FB               [12]  465 	mov	r3,a
      000072 8F 04            [24]  466 	mov	ar4,r7
      000074 8A 82            [24]  467 	mov	dpl,r2
      000076 8B 83            [24]  468 	mov	dph,r3
      000078 8C F0            [24]  469 	mov	b,r4
      00007A 12r00r00         [24]  470 	lcall	__gptrget
      00007D F8               [12]  471 	mov	r0,a
      00007E A3               [24]  472 	inc	dptr
      00007F 12r00r00         [24]  473 	lcall	__gptrget
      000082 F9               [12]  474 	mov	r1,a
      000083 08               [12]  475 	inc	r0
      000084 B8 00 01         [24]  476 	cjne	r0,#0x00,00131$
      000087 09               [12]  477 	inc	r1
      000088                        478 00131$:
      000088 8A 82            [24]  479 	mov	dpl,r2
      00008A 8B 83            [24]  480 	mov	dph,r3
      00008C 8C F0            [24]  481 	mov	b,r4
      00008E E8               [12]  482 	mov	a,r0
      00008F 12r00r00         [24]  483 	lcall	__gptrput
      000092 A3               [24]  484 	inc	dptr
      000093 E9               [12]  485 	mov	a,r1
      000094 12r00r00         [24]  486 	lcall	__gptrput
                                    487 ;	main.c:15: if (num[2] == 6) {
      000097 B8 06 05         [24]  488 	cjne	r0,#0x06,00132$
      00009A B9 00 02         [24]  489 	cjne	r1,#0x00,00132$
      00009D 80 01            [24]  490 	sjmp	00133$
      00009F                        491 00132$:
      00009F 22               [24]  492 	ret
      0000A0                        493 00133$:
                                    494 ;	main.c:16: num[1]++;
      0000A0 74 02            [12]  495 	mov	a,#0x02
      0000A2 2D               [12]  496 	add	a,r5
      0000A3 F5*00            [12]  497 	mov	_run_clock_sloc0_1_0,a
      0000A5 E4               [12]  498 	clr	a
      0000A6 3E               [12]  499 	addc	a,r6
      0000A7 F5*01            [12]  500 	mov	(_run_clock_sloc0_1_0 + 1),a
      0000A9 8F*02            [24]  501 	mov	(_run_clock_sloc0_1_0 + 2),r7
      0000AB 85*00 82         [24]  502 	mov	dpl,_run_clock_sloc0_1_0
      0000AE 85*01 83         [24]  503 	mov	dph,(_run_clock_sloc0_1_0 + 1)
      0000B1 85*02 F0         [24]  504 	mov	b,(_run_clock_sloc0_1_0 + 2)
      0000B4 12r00r00         [24]  505 	lcall	__gptrget
      0000B7 F8               [12]  506 	mov	r0,a
      0000B8 A3               [24]  507 	inc	dptr
      0000B9 12r00r00         [24]  508 	lcall	__gptrget
      0000BC F9               [12]  509 	mov	r1,a
      0000BD 08               [12]  510 	inc	r0
      0000BE B8 00 01         [24]  511 	cjne	r0,#0x00,00134$
      0000C1 09               [12]  512 	inc	r1
      0000C2                        513 00134$:
      0000C2 85*00 82         [24]  514 	mov	dpl,_run_clock_sloc0_1_0
      0000C5 85*01 83         [24]  515 	mov	dph,(_run_clock_sloc0_1_0 + 1)
      0000C8 85*02 F0         [24]  516 	mov	b,(_run_clock_sloc0_1_0 + 2)
      0000CB E8               [12]  517 	mov	a,r0
      0000CC 12r00r00         [24]  518 	lcall	__gptrput
      0000CF A3               [24]  519 	inc	dptr
      0000D0 E9               [12]  520 	mov	a,r1
      0000D1 12r00r00         [24]  521 	lcall	__gptrput
                                    522 ;	main.c:17: num[2] = 0;
      0000D4 8A 82            [24]  523 	mov	dpl,r2
      0000D6 8B 83            [24]  524 	mov	dph,r3
      0000D8 8C F0            [24]  525 	mov	b,r4
      0000DA E4               [12]  526 	clr	a
      0000DB 12r00r00         [24]  527 	lcall	__gptrput
      0000DE A3               [24]  528 	inc	dptr
      0000DF 12r00r00         [24]  529 	lcall	__gptrput
                                    530 ;	main.c:18: if (num[1] == 10) {
      0000E2 B8 0A 37         [24]  531 	cjne	r0,#0x0a,00109$
      0000E5 B9 00 34         [24]  532 	cjne	r1,#0x00,00109$
                                    533 ;	main.c:19: num[1] = 0;
      0000E8 85*00 82         [24]  534 	mov	dpl,_run_clock_sloc0_1_0
      0000EB 85*01 83         [24]  535 	mov	dph,(_run_clock_sloc0_1_0 + 1)
      0000EE 85*02 F0         [24]  536 	mov	b,(_run_clock_sloc0_1_0 + 2)
      0000F1 E4               [12]  537 	clr	a
      0000F2 12r00r00         [24]  538 	lcall	__gptrput
      0000F5 A3               [24]  539 	inc	dptr
      0000F6 12r00r00         [24]  540 	lcall	__gptrput
                                    541 ;	main.c:20: num[0]++;
      0000F9 8D 82            [24]  542 	mov	dpl,r5
      0000FB 8E 83            [24]  543 	mov	dph,r6
      0000FD 8F F0            [24]  544 	mov	b,r7
      0000FF 12r00r00         [24]  545 	lcall	__gptrget
      000102 FB               [12]  546 	mov	r3,a
      000103 A3               [24]  547 	inc	dptr
      000104 12r00r00         [24]  548 	lcall	__gptrget
      000107 FC               [12]  549 	mov	r4,a
      000108 0B               [12]  550 	inc	r3
      000109 BB 00 01         [24]  551 	cjne	r3,#0x00,00137$
      00010C 0C               [12]  552 	inc	r4
      00010D                        553 00137$:
      00010D 8D 82            [24]  554 	mov	dpl,r5
      00010F 8E 83            [24]  555 	mov	dph,r6
      000111 8F F0            [24]  556 	mov	b,r7
      000113 EB               [12]  557 	mov	a,r3
      000114 12r00r00         [24]  558 	lcall	__gptrput
      000117 A3               [24]  559 	inc	dptr
      000118 EC               [12]  560 	mov	a,r4
                                    561 ;	main.c:25: }
      000119 02r00r00         [24]  562 	ljmp	__gptrput
      00011C                        563 00109$:
      00011C 22               [24]  564 	ret
                                    565 ;------------------------------------------------------------
                                    566 ;Allocation info for local variables in function 'timer_isr'
                                    567 ;------------------------------------------------------------
                                    568 ;	main.c:27: void timer_isr (void) __interrupt (1) __using (1) {	//控制聲音頻率
                                    569 ;	-----------------------------------------
                                    570 ;	 function timer_isr
                                    571 ;	-----------------------------------------
      00011D                        572 _timer_isr:
                           00000F   573 	ar7 = 0x0f
                           00000E   574 	ar6 = 0x0e
                           00000D   575 	ar5 = 0x0d
                           00000C   576 	ar4 = 0x0c
                           00000B   577 	ar3 = 0x0b
                           00000A   578 	ar2 = 0x0a
                           000009   579 	ar1 = 0x09
                           000008   580 	ar0 = 0x08
      00011D C0 E0            [24]  581 	push	acc
      00011F C0 D0            [24]  582 	push	psw
                                    583 ;	main.c:28: TH0  = 15536 >> 8;
      000121 75 8C 3C         [24]  584 	mov	_TH0,#0x3c
                                    585 ;	main.c:29: TL0  = 15536 & 0xff;
      000124 75 8A B0         [24]  586 	mov	_TL0,#0xb0
                                    587 ;	main.c:32: counter++;
      000127 05*00            [12]  588 	inc	_counter
      000129 E4               [12]  589 	clr	a
      00012A B5*00 02         [24]  590 	cjne	a,_counter,00103$
      00012D 05*01            [12]  591 	inc	(_counter + 1)
      00012F                        592 00103$:
                                    593 ;	main.c:34: }
      00012F D0 D0            [24]  594 	pop	psw
      000131 D0 E0            [24]  595 	pop	acc
      000133 32               [24]  596 	reti
                                    597 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    598 ;	eliminated unneeded push/pop dpl
                                    599 ;	eliminated unneeded push/pop dph
                                    600 ;	eliminated unneeded push/pop b
                                    601 ;------------------------------------------------------------
                                    602 ;Allocation info for local variables in function 'timer1'
                                    603 ;------------------------------------------------------------
                                    604 ;	main.c:36: void timer1 (void) __interrupt (3) __using (2) {	//換下一個音
                                    605 ;	-----------------------------------------
                                    606 ;	 function timer1
                                    607 ;	-----------------------------------------
      000134                        608 _timer1:
                           000017   609 	ar7 = 0x17
                           000016   610 	ar6 = 0x16
                           000015   611 	ar5 = 0x15
                           000014   612 	ar4 = 0x14
                           000013   613 	ar3 = 0x13
                           000012   614 	ar2 = 0x12
                           000011   615 	ar1 = 0x11
                           000010   616 	ar0 = 0x10
      000134 C0 D0            [24]  617 	push	psw
                                    618 ;	main.c:37: TH1  = 15536 >> 8;
      000136 75 8D 3C         [24]  619 	mov	_TH1,#0x3c
                                    620 ;	main.c:38: TL1  = 15536 & 0xff;
      000139 75 8B B0         [24]  621 	mov	_TL1,#0xb0
                                    622 ;	main.c:39: P1_4 != P1_4;
      00013C A2 94            [12]  623 	mov	c,_P1_4
      00013E A2 94            [12]  624 	mov	c,_P1_4
                                    625 ;	main.c:40: }
      000140 D0 D0            [24]  626 	pop	psw
      000142 32               [24]  627 	reti
                                    628 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    629 ;	eliminated unneeded push/pop dpl
                                    630 ;	eliminated unneeded push/pop dph
                                    631 ;	eliminated unneeded push/pop b
                                    632 ;	eliminated unneeded push/pop acc
                                    633 ;------------------------------------------------------------
                                    634 ;Allocation info for local variables in function 'keyPressed'
                                    635 ;------------------------------------------------------------
                                    636 ;row                       Allocated with name '_keyPressed_row_65536_11'
                                    637 ;c                         Allocated to registers r4 r5 
                                    638 ;col                       Allocated to registers r2 r3 
                                    639 ;magic                     Allocated to registers r7 r6 
                                    640 ;------------------------------------------------------------
                                    641 ;	main.c:43: short keyPressed(short row) {
                                    642 ;	-----------------------------------------
                                    643 ;	 function keyPressed
                                    644 ;	-----------------------------------------
      000143                        645 _keyPressed:
                           000007   646 	ar7 = 0x07
                           000006   647 	ar6 = 0x06
                           000005   648 	ar5 = 0x05
                           000004   649 	ar4 = 0x04
                           000003   650 	ar3 = 0x03
                           000002   651 	ar2 = 0x02
                           000001   652 	ar1 = 0x01
                           000000   653 	ar0 = 0x00
      000143 85 82*00         [24]  654 	mov	_keyPressed_row_65536_11,dpl
      000146 85 83*01         [24]  655 	mov	(_keyPressed_row_65536_11 + 1),dph
                                    656 ;	main.c:44: if((P0 & 0b11110000) != 0b11110000){	//if 按下按鈕
      000149 AC 80            [24]  657 	mov	r4,_P0
      00014B 53 04 F0         [24]  658 	anl	ar4,#0xf0
      00014E 7D 00            [12]  659 	mov	r5,#0x00
      000150 BC F0 05         [24]  660 	cjne	r4,#0xf0,00127$
      000153 BD 00 02         [24]  661 	cjne	r5,#0x00,00127$
      000156 80 56            [24]  662 	sjmp	00105$
      000158                        663 00127$:
                                    664 ;	main.c:45: for (short c = 1, col = 0; col < 4; c *= 2, col++) {
      000158 7C 01            [12]  665 	mov	r4,#0x01
      00015A 7D 00            [12]  666 	mov	r5,#0x00
      00015C 7A 00            [12]  667 	mov	r2,#0x00
      00015E 7B 00            [12]  668 	mov	r3,#0x00
      000160 78 00            [12]  669 	mov	r0,#0x00
      000162 79 00            [12]  670 	mov	r1,#0x00
      000164                        671 00107$:
      000164 C3               [12]  672 	clr	c
      000165 E8               [12]  673 	mov	a,r0
      000166 94 04            [12]  674 	subb	a,#0x04
      000168 E9               [12]  675 	mov	a,r1
      000169 64 80            [12]  676 	xrl	a,#0x80
      00016B 94 80            [12]  677 	subb	a,#0x80
      00016D 50 3F            [24]  678 	jnc	00105$
                                    679 ;	main.c:47: `			short magic = ((P0 >> 4) ^ 0b11111111) & 0b00001111;
      00016F E5 80            [12]  680 	mov	a,_P0
      000171 C4               [12]  681 	swap	a
      000172 54 0F            [12]  682 	anl	a,#0x0f
      000174 FF               [12]  683 	mov	r7,a
      000175 63 07 FF         [24]  684 	xrl	ar7,#0xff
      000178 53 07 0F         [24]  685 	anl	ar7,#0x0f
      00017B 7E 00            [12]  686 	mov	r6,#0x00
                                    687 ;	main.c:48: if (magic == c) {
      00017D EF               [12]  688 	mov	a,r7
      00017E B5 04 1C         [24]  689 	cjne	a,ar4,00108$
      000181 EE               [12]  690 	mov	a,r6
      000182 B5 05 18         [24]  691 	cjne	a,ar5,00108$
                                    692 ;	main.c:49: return row * 4 + col;
      000185 E5*00            [12]  693 	mov	a,_keyPressed_row_65536_11
      000187 25*00            [12]  694 	add	a,_keyPressed_row_65536_11
      000189 FE               [12]  695 	mov	r6,a
      00018A E5*01            [12]  696 	mov	a,(_keyPressed_row_65536_11 + 1)
      00018C 33               [12]  697 	rlc	a
      00018D FF               [12]  698 	mov	r7,a
      00018E EE               [12]  699 	mov	a,r6
      00018F 2E               [12]  700 	add	a,r6
      000190 FE               [12]  701 	mov	r6,a
      000191 EF               [12]  702 	mov	a,r7
      000192 33               [12]  703 	rlc	a
      000193 FF               [12]  704 	mov	r7,a
      000194 EA               [12]  705 	mov	a,r2
      000195 2E               [12]  706 	add	a,r6
      000196 F5 82            [12]  707 	mov	dpl,a
      000198 EB               [12]  708 	mov	a,r3
      000199 3F               [12]  709 	addc	a,r7
      00019A F5 83            [12]  710 	mov	dph,a
      00019C 22               [24]  711 	ret
      00019D                        712 00108$:
                                    713 ;	main.c:45: for (short c = 1, col = 0; col < 4; c *= 2, col++) {
      00019D EC               [12]  714 	mov	a,r4
      00019E 2C               [12]  715 	add	a,r4
      00019F FC               [12]  716 	mov	r4,a
      0001A0 ED               [12]  717 	mov	a,r5
      0001A1 33               [12]  718 	rlc	a
      0001A2 FD               [12]  719 	mov	r5,a
      0001A3 08               [12]  720 	inc	r0
      0001A4 B8 00 01         [24]  721 	cjne	r0,#0x00,00131$
      0001A7 09               [12]  722 	inc	r1
      0001A8                        723 00131$:
      0001A8 88 02            [24]  724 	mov	ar2,r0
      0001AA 89 03            [24]  725 	mov	ar3,r1
      0001AC 80 B6            [24]  726 	sjmp	00107$
      0001AE                        727 00105$:
                                    728 ;	main.c:53: return -1;	//沒按 return -1
      0001AE 90 FF FF         [24]  729 	mov	dptr,#0xffff
                                    730 ;	main.c:54: }
      0001B1 22               [24]  731 	ret
                                    732 ;------------------------------------------------------------
                                    733 ;Allocation info for local variables in function 'display'
                                    734 ;------------------------------------------------------------
                                    735 ;alpha                     Allocated with name '_display_PARM_2'
                                    736 ;num                       Allocated with name '_display_PARM_3'
                                    737 ;isSetting                 Allocated with name '_display_PARM_4'
                                    738 ;flash_flag                Allocated with name '_display_PARM_5'
                                    739 ;table                     Allocated with name '_display_table_65536_17'
                                    740 ;i                         Allocated to registers r1 r2 
                                    741 ;t                         Allocated with name '_display_t_262144_21'
                                    742 ;j                         Allocated to registers r6 r7 
                                    743 ;i                         Allocated to registers r4 r5 
                                    744 ;t                         Allocated with name '_display_t_196608_26'
                                    745 ;j                         Allocated to registers r6 r7 
                                    746 ;------------------------------------------------------------
                                    747 ;	main.c:56: void display(short table[], short alpha[], short num[], bool isSetting, long flash_flag) {
                                    748 ;	-----------------------------------------
                                    749 ;	 function display
                                    750 ;	-----------------------------------------
      0001B2                        751 _display:
      0001B2 85 82*0B         [24]  752 	mov	_display_table_65536_17,dpl
      0001B5 85 83*0C         [24]  753 	mov	(_display_table_65536_17 + 1),dph
      0001B8 85 F0*0D         [24]  754 	mov	(_display_table_65536_17 + 2),b
                                    755 ;	main.c:57: if (isSetting) { // flashing
      0001BB E5*06            [12]  756 	mov	a,_display_PARM_4
      0001BD 70 03            [24]  757 	jnz	00168$
      0001BF 02r02r69         [24]  758 	ljmp	00108$
      0001C2                        759 00168$:
                                    760 ;	main.c:58: if (flash_flag > 7800) { // 頻率
      0001C2 C3               [12]  761 	clr	c
      0001C3 74 78            [12]  762 	mov	a,#0x78
      0001C5 95*07            [12]  763 	subb	a,_display_PARM_5
      0001C7 74 1E            [12]  764 	mov	a,#0x1e
      0001C9 95*08            [12]  765 	subb	a,(_display_PARM_5 + 1)
      0001CB E4               [12]  766 	clr	a
      0001CC 95*09            [12]  767 	subb	a,(_display_PARM_5 + 2)
      0001CE 74 80            [12]  768 	mov	a,#(0x00 ^ 0x80)
      0001D0 85*0A F0         [24]  769 	mov	b,(_display_PARM_5 + 3)
      0001D3 63 F0 80         [24]  770 	xrl	b,#0x80
      0001D6 95 F0            [12]  771 	subb	a,b
      0001D8 40 01            [24]  772 	jc	00169$
      0001DA 22               [24]  773 	ret
      0001DB                        774 00169$:
                                    775 ;	main.c:59: for(short i = 0,t=1; i < 4; i++,t*=2) {
      0001DB 75*0E 01         [24]  776 	mov	_display_t_262144_21,#0x01
      0001DE 75*0F 00         [24]  777 	mov	(_display_t_262144_21 + 1),#0x00
      0001E1 79 00            [12]  778 	mov	r1,#0x00
      0001E3 7A 00            [12]  779 	mov	r2,#0x00
      0001E5                        780 00114$:
      0001E5 C3               [12]  781 	clr	c
      0001E6 E9               [12]  782 	mov	a,r1
      0001E7 94 04            [12]  783 	subb	a,#0x04
      0001E9 EA               [12]  784 	mov	a,r2
      0001EA 64 80            [12]  785 	xrl	a,#0x80
      0001EC 94 80            [12]  786 	subb	a,#0x80
      0001EE 40 01            [24]  787 	jc	00170$
      0001F0 22               [24]  788 	ret
      0001F1                        789 00170$:
                                    790 ;	main.c:60: P1 = table[i];
      0001F1 E9               [12]  791 	mov	a,r1
      0001F2 29               [12]  792 	add	a,r1
      0001F3 F8               [12]  793 	mov	r0,a
      0001F4 EA               [12]  794 	mov	a,r2
      0001F5 33               [12]  795 	rlc	a
      0001F6 FC               [12]  796 	mov	r4,a
      0001F7 E8               [12]  797 	mov	a,r0
      0001F8 25*0B            [12]  798 	add	a,_display_table_65536_17
      0001FA FB               [12]  799 	mov	r3,a
      0001FB EC               [12]  800 	mov	a,r4
      0001FC 35*0C            [12]  801 	addc	a,(_display_table_65536_17 + 1)
      0001FE FE               [12]  802 	mov	r6,a
      0001FF AF*0D            [24]  803 	mov	r7,(_display_table_65536_17 + 2)
      000201 8B 82            [24]  804 	mov	dpl,r3
      000203 8E 83            [24]  805 	mov	dph,r6
      000205 8F F0            [24]  806 	mov	b,r7
      000207 12r00r00         [24]  807 	lcall	__gptrget
      00020A F5 90            [12]  808 	mov	_P1,a
                                    809 ;	main.c:61: P2 = alpha[num[i]];
      00020C E8               [12]  810 	mov	a,r0
      00020D 25*03            [12]  811 	add	a,_display_PARM_3
      00020F F8               [12]  812 	mov	r0,a
      000210 EC               [12]  813 	mov	a,r4
      000211 35*04            [12]  814 	addc	a,(_display_PARM_3 + 1)
      000213 FC               [12]  815 	mov	r4,a
      000214 AF*05            [24]  816 	mov	r7,(_display_PARM_3 + 2)
      000216 88 82            [24]  817 	mov	dpl,r0
      000218 8C 83            [24]  818 	mov	dph,r4
      00021A 8F F0            [24]  819 	mov	b,r7
      00021C 12r00r00         [24]  820 	lcall	__gptrget
      00021F F8               [12]  821 	mov	r0,a
      000220 A3               [24]  822 	inc	dptr
      000221 12r00r00         [24]  823 	lcall	__gptrget
      000224 FC               [12]  824 	mov	r4,a
      000225 E8               [12]  825 	mov	a,r0
      000226 28               [12]  826 	add	a,r0
      000227 F8               [12]  827 	mov	r0,a
      000228 EC               [12]  828 	mov	a,r4
      000229 33               [12]  829 	rlc	a
      00022A FC               [12]  830 	mov	r4,a
      00022B E8               [12]  831 	mov	a,r0
      00022C 25*00            [12]  832 	add	a,_display_PARM_2
      00022E F8               [12]  833 	mov	r0,a
      00022F EC               [12]  834 	mov	a,r4
      000230 35*01            [12]  835 	addc	a,(_display_PARM_2 + 1)
      000232 FC               [12]  836 	mov	r4,a
      000233 AF*02            [24]  837 	mov	r7,(_display_PARM_2 + 2)
      000235 88 82            [24]  838 	mov	dpl,r0
      000237 8C 83            [24]  839 	mov	dph,r4
      000239 8F F0            [24]  840 	mov	b,r7
      00023B 12r00r00         [24]  841 	lcall	__gptrget
      00023E F5 A0            [12]  842 	mov	_P2,a
                                    843 ;	main.c:62: for(int j = 0; j < 500; j++){}
      000240 7E 00            [12]  844 	mov	r6,#0x00
      000242 7F 00            [12]  845 	mov	r7,#0x00
      000244                        846 00111$:
      000244 C3               [12]  847 	clr	c
      000245 EE               [12]  848 	mov	a,r6
      000246 94 F4            [12]  849 	subb	a,#0xf4
      000248 EF               [12]  850 	mov	a,r7
      000249 64 80            [12]  851 	xrl	a,#0x80
      00024B 94 81            [12]  852 	subb	a,#0x81
      00024D 50 07            [24]  853 	jnc	00115$
      00024F 0E               [12]  854 	inc	r6
      000250 BE 00 F1         [24]  855 	cjne	r6,#0x00,00111$
      000253 0F               [12]  856 	inc	r7
      000254 80 EE            [24]  857 	sjmp	00111$
      000256                        858 00115$:
                                    859 ;	main.c:59: for(short i = 0,t=1; i < 4; i++,t*=2) {
      000256 09               [12]  860 	inc	r1
      000257 B9 00 01         [24]  861 	cjne	r1,#0x00,00173$
      00025A 0A               [12]  862 	inc	r2
      00025B                        863 00173$:
      00025B E5*0E            [12]  864 	mov	a,_display_t_262144_21
      00025D 25*0E            [12]  865 	add	a,_display_t_262144_21
      00025F F5*0E            [12]  866 	mov	_display_t_262144_21,a
      000261 E5*0F            [12]  867 	mov	a,(_display_t_262144_21 + 1)
      000263 33               [12]  868 	rlc	a
      000264 F5*0F            [12]  869 	mov	(_display_t_262144_21 + 1),a
      000266 02r01rE5         [24]  870 	ljmp	00114$
      000269                        871 00108$:
                                    872 ;	main.c:66: for(short i = 0,t=1; i < 4; i++,t*=2) {
      000269 75*10 01         [24]  873 	mov	_display_t_196608_26,#0x01
      00026C 75*11 00         [24]  874 	mov	(_display_t_196608_26 + 1),#0x00
      00026F 7C 00            [12]  875 	mov	r4,#0x00
      000271 7D 00            [12]  876 	mov	r5,#0x00
      000273                        877 00120$:
      000273 C3               [12]  878 	clr	c
      000274 EC               [12]  879 	mov	a,r4
      000275 94 04            [12]  880 	subb	a,#0x04
      000277 ED               [12]  881 	mov	a,r5
      000278 64 80            [12]  882 	xrl	a,#0x80
      00027A 94 80            [12]  883 	subb	a,#0x80
      00027C 50 78            [24]  884 	jnc	00122$
                                    885 ;	main.c:67: P1 = table[i];
      00027E EC               [12]  886 	mov	a,r4
      00027F 2C               [12]  887 	add	a,r4
      000280 FA               [12]  888 	mov	r2,a
      000281 ED               [12]  889 	mov	a,r5
      000282 33               [12]  890 	rlc	a
      000283 FB               [12]  891 	mov	r3,a
      000284 EA               [12]  892 	mov	a,r2
      000285 25*0B            [12]  893 	add	a,_display_table_65536_17
      000287 F8               [12]  894 	mov	r0,a
      000288 EB               [12]  895 	mov	a,r3
      000289 35*0C            [12]  896 	addc	a,(_display_table_65536_17 + 1)
      00028B F9               [12]  897 	mov	r1,a
      00028C AF*0D            [24]  898 	mov	r7,(_display_table_65536_17 + 2)
      00028E 88 82            [24]  899 	mov	dpl,r0
      000290 89 83            [24]  900 	mov	dph,r1
      000292 8F F0            [24]  901 	mov	b,r7
      000294 12r00r00         [24]  902 	lcall	__gptrget
      000297 F5 90            [12]  903 	mov	_P1,a
                                    904 ;	main.c:68: P2 = alpha[num[i]];
      000299 EA               [12]  905 	mov	a,r2
      00029A 25*03            [12]  906 	add	a,_display_PARM_3
      00029C FA               [12]  907 	mov	r2,a
      00029D EB               [12]  908 	mov	a,r3
      00029E 35*04            [12]  909 	addc	a,(_display_PARM_3 + 1)
      0002A0 FB               [12]  910 	mov	r3,a
      0002A1 AF*05            [24]  911 	mov	r7,(_display_PARM_3 + 2)
      0002A3 8A 82            [24]  912 	mov	dpl,r2
      0002A5 8B 83            [24]  913 	mov	dph,r3
      0002A7 8F F0            [24]  914 	mov	b,r7
      0002A9 12r00r00         [24]  915 	lcall	__gptrget
      0002AC FA               [12]  916 	mov	r2,a
      0002AD A3               [24]  917 	inc	dptr
      0002AE 12r00r00         [24]  918 	lcall	__gptrget
      0002B1 FB               [12]  919 	mov	r3,a
      0002B2 EA               [12]  920 	mov	a,r2
      0002B3 2A               [12]  921 	add	a,r2
      0002B4 FA               [12]  922 	mov	r2,a
      0002B5 EB               [12]  923 	mov	a,r3
      0002B6 33               [12]  924 	rlc	a
      0002B7 FB               [12]  925 	mov	r3,a
      0002B8 EA               [12]  926 	mov	a,r2
      0002B9 25*00            [12]  927 	add	a,_display_PARM_2
      0002BB FA               [12]  928 	mov	r2,a
      0002BC EB               [12]  929 	mov	a,r3
      0002BD 35*01            [12]  930 	addc	a,(_display_PARM_2 + 1)
      0002BF FB               [12]  931 	mov	r3,a
      0002C0 AF*02            [24]  932 	mov	r7,(_display_PARM_2 + 2)
      0002C2 8A 82            [24]  933 	mov	dpl,r2
      0002C4 8B 83            [24]  934 	mov	dph,r3
      0002C6 8F F0            [24]  935 	mov	b,r7
      0002C8 12r00r00         [24]  936 	lcall	__gptrget
      0002CB F5 A0            [12]  937 	mov	_P2,a
                                    938 ;	main.c:69: for(int j = 0; j < 1000; j++){}
      0002CD 7E 00            [12]  939 	mov	r6,#0x00
      0002CF 7F 00            [12]  940 	mov	r7,#0x00
      0002D1                        941 00117$:
      0002D1 C3               [12]  942 	clr	c
      0002D2 EE               [12]  943 	mov	a,r6
      0002D3 94 E8            [12]  944 	subb	a,#0xe8
      0002D5 EF               [12]  945 	mov	a,r7
      0002D6 64 80            [12]  946 	xrl	a,#0x80
      0002D8 94 83            [12]  947 	subb	a,#0x83
      0002DA 50 07            [24]  948 	jnc	00121$
      0002DC 0E               [12]  949 	inc	r6
      0002DD BE 00 F1         [24]  950 	cjne	r6,#0x00,00117$
      0002E0 0F               [12]  951 	inc	r7
      0002E1 80 EE            [24]  952 	sjmp	00117$
      0002E3                        953 00121$:
                                    954 ;	main.c:66: for(short i = 0,t=1; i < 4; i++,t*=2) {
      0002E3 0C               [12]  955 	inc	r4
      0002E4 BC 00 01         [24]  956 	cjne	r4,#0x00,00177$
      0002E7 0D               [12]  957 	inc	r5
      0002E8                        958 00177$:
      0002E8 E5*10            [12]  959 	mov	a,_display_t_196608_26
      0002EA 25*10            [12]  960 	add	a,_display_t_196608_26
      0002EC F5*10            [12]  961 	mov	_display_t_196608_26,a
      0002EE E5*11            [12]  962 	mov	a,(_display_t_196608_26 + 1)
      0002F0 33               [12]  963 	rlc	a
      0002F1 F5*11            [12]  964 	mov	(_display_t_196608_26 + 1),a
      0002F3 02r02r73         [24]  965 	ljmp	00120$
      0002F6                        966 00122$:
                                    967 ;	main.c:72: }
      0002F6 22               [24]  968 	ret
                                    969 ;------------------------------------------------------------
                                    970 ;Allocation info for local variables in function 'check_sound_trigger'
                                    971 ;------------------------------------------------------------
                                    972 ;	main.c:74: void check_sound_trigger() {
                                    973 ;	-----------------------------------------
                                    974 ;	 function check_sound_trigger
                                    975 ;	-----------------------------------------
      0002F7                        976 _check_sound_trigger:
                                    977 ;	main.c:75: P1_4 = 1;
                                    978 ;	assignBit
      0002F7 D2 94            [12]  979 	setb	_P1_4
                                    980 ;	main.c:76: }
      0002F9 22               [24]  981 	ret
                                    982 ;------------------------------------------------------------
                                    983 ;Allocation info for local variables in function 'main'
                                    984 ;------------------------------------------------------------
                                    985 ;previous                  Allocated with name '_main_previous_65537_32'
                                    986 ;row                       Allocated with name '_main_row_65537_32'
                                    987 ;count                     Allocated with name '_main_count_65537_32'
                                    988 ;num                       Allocated with name '_main_num_65537_32'
                                    989 ;num_bi                    Allocated with name '_main_num_bi_65537_32'
                                    990 ;alpha                     Allocated with name '_main_alpha_65537_32'
                                    991 ;table                     Allocated with name '_main_table_65537_32'
                                    992 ;index                     Allocated with name '_main_index_65538_33'
                                    993 ;flash_flag                Allocated with name '_main_flash_flag_65538_33'
                                    994 ;isSetting                 Allocated to registers r5 
                                    995 ;afterSetting              Allocated to registers 
                                    996 ;setting_bi_time           Allocated to registers r4 
                                    997 ;key                       Allocated to registers r2 r3 
                                    998 ;------------------------------------------------------------
                                    999 ;	main.c:79: int main() {
                                   1000 ;	-----------------------------------------
                                   1001 ;	 function main
                                   1002 ;	-----------------------------------------
      0002FA                       1003 _main:
                                   1004 ;	main.c:91: EA = 1;
                                   1005 ;	assignBit
      0002FA D2 AF            [12] 1006 	setb	_EA
                                   1007 ;	main.c:92: TMOD = 0b00010001;
      0002FC 75 89 11         [24] 1008 	mov	_TMOD,#0x11
                                   1009 ;	main.c:93: IE   = 0x8A;
      0002FF 75 A8 8A         [24] 1010 	mov	_IE,#0x8a
                                   1011 ;	main.c:94: TR0  = 1;	//timer 0 control bit
                                   1012 ;	assignBit
      000302 D2 8C            [12] 1013 	setb	_TR0
                                   1014 ;	main.c:95: TR1  = 1;	//timer 1 control bit
                                   1015 ;	assignBit
      000304 D2 8E            [12] 1016 	setb	_TR1
                                   1017 ;	main.c:97: short previous = -1;
      000306 75*02 FF         [24] 1018 	mov	_main_previous_65537_32,#0xff
      000309 75*03 FF         [24] 1019 	mov	(_main_previous_65537_32 + 1),#0xff
                                   1020 ;	main.c:98: short row = 0;
      00030C E4               [12] 1021 	clr	a
      00030D F5*04            [12] 1022 	mov	_main_row_65537_32,a
      00030F F5*05            [12] 1023 	mov	(_main_row_65537_32 + 1),a
                                   1024 ;	main.c:99: short count = 1;
      000311 75*06 01         [24] 1025 	mov	_main_count_65537_32,#0x01
                                   1026 ;	1-genFromRTrack replaced	mov	(_main_count_65537_32 + 1),#0x00
      000314 F5*07            [12] 1027 	mov	(_main_count_65537_32 + 1),a
                                   1028 ;	main.c:100: short num[4] = {0};
      000316 F5*08            [12] 1029 	mov	(_main_num_65537_32 + 0),a
      000318 F5*09            [12] 1030 	mov	(_main_num_65537_32 + 1),a
      00031A F5*0A            [12] 1031 	mov	((_main_num_65537_32 + 0x0002) + 0),a
      00031C F5*0B            [12] 1032 	mov	((_main_num_65537_32 + 0x0002) + 1),a
      00031E F5*0C            [12] 1033 	mov	((_main_num_65537_32 + 0x0004) + 0),a
      000320 F5*0D            [12] 1034 	mov	((_main_num_65537_32 + 0x0004) + 1),a
      000322 F5*0E            [12] 1035 	mov	((_main_num_65537_32 + 0x0006) + 0),a
      000324 F5*0F            [12] 1036 	mov	((_main_num_65537_32 + 0x0006) + 1),a
                                   1037 ;	main.c:101: short num_bi[4] = {0};
      000326 F5*10            [12] 1038 	mov	(_main_num_bi_65537_32 + 0),a
      000328 F5*11            [12] 1039 	mov	(_main_num_bi_65537_32 + 1),a
      00032A F5*12            [12] 1040 	mov	((_main_num_bi_65537_32 + 0x0002) + 0),a
      00032C F5*13            [12] 1041 	mov	((_main_num_bi_65537_32 + 0x0002) + 1),a
      00032E F5*14            [12] 1042 	mov	((_main_num_bi_65537_32 + 0x0004) + 0),a
      000330 F5*15            [12] 1043 	mov	((_main_num_bi_65537_32 + 0x0004) + 1),a
      000332 F5*16            [12] 1044 	mov	((_main_num_bi_65537_32 + 0x0006) + 0),a
      000334 F5*17            [12] 1045 	mov	((_main_num_bi_65537_32 + 0x0006) + 1),a
                                   1046 ;	main.c:102: const short alpha[11] = {
      000336 75*18 03         [24] 1047 	mov	(_main_alpha_65537_32 + 0),#0x03
                                   1048 ;	1-genFromRTrack replaced	mov	(_main_alpha_65537_32 + 1),#0x00
      000339 F5*19            [12] 1049 	mov	(_main_alpha_65537_32 + 1),a
      00033B 75*1A 9F         [24] 1050 	mov	((_main_alpha_65537_32 + 0x0002) + 0),#0x9f
                                   1051 ;	1-genFromRTrack replaced	mov	((_main_alpha_65537_32 + 0x0002) + 1),#0x00
      00033E F5*1B            [12] 1052 	mov	((_main_alpha_65537_32 + 0x0002) + 1),a
      000340 75*1C 25         [24] 1053 	mov	((_main_alpha_65537_32 + 0x0004) + 0),#0x25
                                   1054 ;	1-genFromRTrack replaced	mov	((_main_alpha_65537_32 + 0x0004) + 1),#0x00
      000343 F5*1D            [12] 1055 	mov	((_main_alpha_65537_32 + 0x0004) + 1),a
      000345 75*1E 0D         [24] 1056 	mov	((_main_alpha_65537_32 + 0x0006) + 0),#0x0d
                                   1057 ;	1-genFromRTrack replaced	mov	((_main_alpha_65537_32 + 0x0006) + 1),#0x00
      000348 F5*1F            [12] 1058 	mov	((_main_alpha_65537_32 + 0x0006) + 1),a
      00034A 75*20 99         [24] 1059 	mov	((_main_alpha_65537_32 + 0x0008) + 0),#0x99
                                   1060 ;	1-genFromRTrack replaced	mov	((_main_alpha_65537_32 + 0x0008) + 1),#0x00
      00034D F5*21            [12] 1061 	mov	((_main_alpha_65537_32 + 0x0008) + 1),a
      00034F 75*22 49         [24] 1062 	mov	((_main_alpha_65537_32 + 0x000a) + 0),#0x49
                                   1063 ;	1-genFromRTrack replaced	mov	((_main_alpha_65537_32 + 0x000a) + 1),#0x00
      000352 F5*23            [12] 1064 	mov	((_main_alpha_65537_32 + 0x000a) + 1),a
      000354 75*24 41         [24] 1065 	mov	((_main_alpha_65537_32 + 0x000c) + 0),#0x41
                                   1066 ;	1-genFromRTrack replaced	mov	((_main_alpha_65537_32 + 0x000c) + 1),#0x00
      000357 F5*25            [12] 1067 	mov	((_main_alpha_65537_32 + 0x000c) + 1),a
      000359 75*26 1F         [24] 1068 	mov	((_main_alpha_65537_32 + 0x000e) + 0),#0x1f
                                   1069 ;	1-genFromRTrack replaced	mov	((_main_alpha_65537_32 + 0x000e) + 1),#0x00
      00035C F5*27            [12] 1070 	mov	((_main_alpha_65537_32 + 0x000e) + 1),a
      00035E 75*28 01         [24] 1071 	mov	((_main_alpha_65537_32 + 0x0010) + 0),#0x01
                                   1072 ;	1-genFromRTrack replaced	mov	((_main_alpha_65537_32 + 0x0010) + 1),#0x00
      000361 F5*29            [12] 1073 	mov	((_main_alpha_65537_32 + 0x0010) + 1),a
      000363 75*2A 09         [24] 1074 	mov	((_main_alpha_65537_32 + 0x0012) + 0),#0x09
                                   1075 ;	1-genFromRTrack replaced	mov	((_main_alpha_65537_32 + 0x0012) + 1),#0x00
      000366 F5*2B            [12] 1076 	mov	((_main_alpha_65537_32 + 0x0012) + 1),a
      000368 75*2C FF         [24] 1077 	mov	((_main_alpha_65537_32 + 0x0014) + 0),#0xff
                                   1078 ;	1-genFromRTrack replaced	mov	((_main_alpha_65537_32 + 0x0014) + 1),#0x00
      00036B F5*2D            [12] 1079 	mov	((_main_alpha_65537_32 + 0x0014) + 1),a
                                   1080 ;	main.c:115: const short table[4] = {
      00036D 75*2E FE         [24] 1081 	mov	(_main_table_65537_32 + 0),#0xfe
                                   1082 ;	1-genFromRTrack replaced	mov	(_main_table_65537_32 + 1),#0x00
      000370 F5*2F            [12] 1083 	mov	(_main_table_65537_32 + 1),a
      000372 75*30 FD         [24] 1084 	mov	((_main_table_65537_32 + 0x0002) + 0),#0xfd
                                   1085 ;	1-genFromRTrack replaced	mov	((_main_table_65537_32 + 0x0002) + 1),#0x00
      000375 F5*31            [12] 1086 	mov	((_main_table_65537_32 + 0x0002) + 1),a
      000377 75*32 FB         [24] 1087 	mov	((_main_table_65537_32 + 0x0004) + 0),#0xfb
                                   1088 ;	1-genFromRTrack replaced	mov	((_main_table_65537_32 + 0x0004) + 1),#0x00
      00037A F5*33            [12] 1089 	mov	((_main_table_65537_32 + 0x0004) + 1),a
      00037C 75*34 F7         [24] 1090 	mov	((_main_table_65537_32 + 0x0006) + 0),#0xf7
                                   1091 ;	1-genFromRTrack replaced	mov	((_main_table_65537_32 + 0x0006) + 1),#0x00
      00037F F5*35            [12] 1092 	mov	((_main_table_65537_32 + 0x0006) + 1),a
                                   1093 ;	main.c:121: P0 = 0b00001111;
      000381 75 80 0F         [24] 1094 	mov	_P0,#0x0f
                                   1095 ;	main.c:122: short index = 0;
      000384 F5*36            [12] 1096 	mov	_main_index_65538_33,a
      000386 F5*37            [12] 1097 	mov	(_main_index_65538_33 + 1),a
                                   1098 ;	main.c:123: long flash_flag = 0;
      000388 F5*38            [12] 1099 	mov	_main_flash_flag_65538_33,a
      00038A F5*39            [12] 1100 	mov	(_main_flash_flag_65538_33 + 1),a
      00038C F5*3A            [12] 1101 	mov	(_main_flash_flag_65538_33 + 2),a
      00038E F5*3B            [12] 1102 	mov	(_main_flash_flag_65538_33 + 3),a
                                   1103 ;	main.c:124: bool isSetting = false;
      000390 7D 00            [12] 1104 	mov	r5,#0x00
                                   1105 ;	main.c:126: bool setting_bi_time = false;
      000392 7C 00            [12] 1106 	mov	r4,#0x00
                                   1107 ;	main.c:127: while (1) {
      000394                       1108 00141$:
                                   1109 ;	main.c:128: flash_flag++;
      000394 05*38            [12] 1110 	inc	_main_flash_flag_65538_33
      000396 E4               [12] 1111 	clr	a
      000397 B5*38 0C         [24] 1112 	cjne	a,_main_flash_flag_65538_33,00229$
      00039A 05*39            [12] 1113 	inc	(_main_flash_flag_65538_33 + 1)
      00039C B5*39 07         [24] 1114 	cjne	a,(_main_flash_flag_65538_33 + 1),00229$
      00039F 05*3A            [12] 1115 	inc	(_main_flash_flag_65538_33 + 2)
      0003A1 B5*3A 02         [24] 1116 	cjne	a,(_main_flash_flag_65538_33 + 2),00229$
      0003A4 05*3B            [12] 1117 	inc	(_main_flash_flag_65538_33 + 3)
      0003A6                       1118 00229$:
                                   1119 ;	main.c:129: if (flash_flag >= 8000)  // 頻率
      0003A6 C3               [12] 1120 	clr	c
      0003A7 E5*38            [12] 1121 	mov	a,_main_flash_flag_65538_33
      0003A9 94 40            [12] 1122 	subb	a,#0x40
      0003AB E5*39            [12] 1123 	mov	a,(_main_flash_flag_65538_33 + 1)
      0003AD 94 1F            [12] 1124 	subb	a,#0x1f
      0003AF E5*3A            [12] 1125 	mov	a,(_main_flash_flag_65538_33 + 2)
      0003B1 94 00            [12] 1126 	subb	a,#0x00
      0003B3 E5*3B            [12] 1127 	mov	a,(_main_flash_flag_65538_33 + 3)
      0003B5 64 80            [12] 1128 	xrl	a,#0x80
      0003B7 94 80            [12] 1129 	subb	a,#0x80
      0003B9 40 09            [24] 1130 	jc	00102$
                                   1131 ;	main.c:130: flash_flag = 0;
      0003BB E4               [12] 1132 	clr	a
      0003BC F5*38            [12] 1133 	mov	_main_flash_flag_65538_33,a
      0003BE F5*39            [12] 1134 	mov	(_main_flash_flag_65538_33 + 1),a
      0003C0 F5*3A            [12] 1135 	mov	(_main_flash_flag_65538_33 + 2),a
      0003C2 F5*3B            [12] 1136 	mov	(_main_flash_flag_65538_33 + 3),a
      0003C4                       1137 00102$:
                                   1138 ;	main.c:131: P0     =count^0b11111111;
      0003C4 74 FF            [12] 1139 	mov	a,#0xff
      0003C6 65*06            [12] 1140 	xrl	a,_main_count_65537_32
      0003C8 FA               [12] 1141 	mov	r2,a
      0003C9 8A 80            [24] 1142 	mov	_P0,r2
                                   1143 ;	main.c:132: count *=2; //shift
      0003CB E5*06            [12] 1144 	mov	a,_main_count_65537_32
      0003CD 25*06            [12] 1145 	add	a,_main_count_65537_32
      0003CF F5*06            [12] 1146 	mov	_main_count_65537_32,a
      0003D1 E5*07            [12] 1147 	mov	a,(_main_count_65537_32 + 1)
      0003D3 33               [12] 1148 	rlc	a
      0003D4 F5*07            [12] 1149 	mov	(_main_count_65537_32 + 1),a
                                   1150 ;	main.c:133: short key = keyPressed(row);
      0003D6 85*04 82         [24] 1151 	mov	dpl,_main_row_65537_32
      0003D9 85*05 83         [24] 1152 	mov	dph,(_main_row_65537_32 + 1)
      0003DC C0 05            [24] 1153 	push	ar5
      0003DE C0 04            [24] 1154 	push	ar4
      0003E0 12r01r43         [24] 1155 	lcall	_keyPressed
      0003E3 AA 82            [24] 1156 	mov	r2,dpl
      0003E5 AB 83            [24] 1157 	mov	r3,dph
      0003E7 D0 04            [24] 1158 	pop	ar4
      0003E9 D0 05            [24] 1159 	pop	ar5
                                   1160 ;	main.c:134: if (key != previous && key != -1) {	//有按且不等於上一按 => 處理debounce
      0003EB EA               [12] 1161 	mov	a,r2
      0003EC B5*02 07         [24] 1162 	cjne	a,_main_previous_65537_32,00231$
      0003EF EB               [12] 1163 	mov	a,r3
      0003F0 B5*03 03         [24] 1164 	cjne	a,(_main_previous_65537_32 + 1),00231$
      0003F3 02r04rA9         [24] 1165 	ljmp	00126$
      0003F6                       1166 00231$:
      0003F6 BA FF 06         [24] 1167 	cjne	r2,#0xff,00232$
      0003F9 BB FF 03         [24] 1168 	cjne	r3,#0xff,00232$
      0003FC 02r04rA9         [24] 1169 	ljmp	00126$
      0003FF                       1170 00232$:
                                   1171 ;	main.c:135: previous = key;
      0003FF 8A*02            [24] 1172 	mov	_main_previous_65537_32,r2
      000401 8B*03            [24] 1173 	mov	(_main_previous_65537_32 + 1),r3
                                   1174 ;	main.c:141: if (key == 10) isSetting = true;
      000403 BA 0A 05         [24] 1175 	cjne	r2,#0x0a,00104$
      000406 BB 00 02         [24] 1176 	cjne	r3,#0x00,00104$
      000409 7D 01            [12] 1177 	mov	r5,#0x01
      00040B                       1178 00104$:
                                   1179 ;	main.c:142: if (key == 11) isSetting = false;
      00040B BA 0B 05         [24] 1180 	cjne	r2,#0x0b,00106$
      00040E BB 00 02         [24] 1181 	cjne	r3,#0x00,00106$
      000411 7D 00            [12] 1182 	mov	r5,#0x00
      000413                       1183 00106$:
                                   1184 ;	main.c:143: if (key == 12) setting_bi_time = true;
      000413 BA 0C 05         [24] 1185 	cjne	r2,#0x0c,00108$
      000416 BB 00 02         [24] 1186 	cjne	r3,#0x00,00108$
      000419 7C 01            [12] 1187 	mov	r4,#0x01
      00041B                       1188 00108$:
                                   1189 ;	main.c:144: if (key == 13) setting_bi_time = false;
      00041B BA 0D 05         [24] 1190 	cjne	r2,#0x0d,00110$
      00041E BB 00 02         [24] 1191 	cjne	r3,#0x00,00110$
      000421 7C 00            [12] 1192 	mov	r4,#0x00
      000423                       1193 00110$:
                                   1194 ;	main.c:147: if (isSetting) {
      000423 ED               [12] 1195 	mov	a,r5
      000424 60 40            [24] 1196 	jz	00117$
                                   1197 ;	main.c:149: if (key >= 0 && key <= 9)
      000426 EB               [12] 1198 	mov	a,r3
      000427 20 E7 2A         [24] 1199 	jb	acc.7,00112$
      00042A C3               [12] 1200 	clr	c
      00042B 74 09            [12] 1201 	mov	a,#0x09
      00042D 9A               [12] 1202 	subb	a,r2
      00042E 74 80            [12] 1203 	mov	a,#(0x00 ^ 0x80)
      000430 8B F0            [24] 1204 	mov	b,r3
      000432 63 F0 80         [24] 1205 	xrl	b,#0x80
      000435 95 F0            [12] 1206 	subb	a,b
      000437 40 1B            [24] 1207 	jc	00112$
                                   1208 ;	main.c:150: num[index++] = key;
      000439 AE*36            [24] 1209 	mov	r6,_main_index_65538_33
      00043B AF*37            [24] 1210 	mov	r7,(_main_index_65538_33 + 1)
      00043D 05*36            [12] 1211 	inc	_main_index_65538_33
      00043F E4               [12] 1212 	clr	a
      000440 B5*36 02         [24] 1213 	cjne	a,_main_index_65538_33,00244$
      000443 05*37            [12] 1214 	inc	(_main_index_65538_33 + 1)
      000445                       1215 00244$:
      000445 EE               [12] 1216 	mov	a,r6
      000446 2E               [12] 1217 	add	a,r6
      000447 FE               [12] 1218 	mov	r6,a
      000448 EF               [12] 1219 	mov	a,r7
      000449 33               [12] 1220 	rlc	a
      00044A FF               [12] 1221 	mov	r7,a
      00044B EE               [12] 1222 	mov	a,r6
      00044C 24r08            [12] 1223 	add	a,#_main_num_65537_32
      00044E F8               [12] 1224 	mov	r0,a
      00044F A6 02            [24] 1225 	mov	@r0,ar2
      000451 08               [12] 1226 	inc	r0
      000452 A6 03            [24] 1227 	mov	@r0,ar3
      000454                       1228 00112$:
                                   1229 ;	main.c:151: if (index == 4) index = 0;
      000454 74 04            [12] 1230 	mov	a,#0x04
      000456 B5*36 06         [24] 1231 	cjne	a,_main_index_65538_33,00245$
      000459 E4               [12] 1232 	clr	a
      00045A B5*37 02         [24] 1233 	cjne	a,(_main_index_65538_33 + 1),00245$
      00045D 80 02            [24] 1234 	sjmp	00246$
      00045F                       1235 00245$:
      00045F 80 05            [24] 1236 	sjmp	00117$
      000461                       1237 00246$:
      000461 E4               [12] 1238 	clr	a
      000462 F5*36            [12] 1239 	mov	_main_index_65538_33,a
      000464 F5*37            [12] 1240 	mov	(_main_index_65538_33 + 1),a
      000466                       1241 00117$:
                                   1242 ;	main.c:154: if (setting_bi_time) {
      000466 EC               [12] 1243 	mov	a,r4
      000467 60 40            [24] 1244 	jz	00126$
                                   1245 ;	main.c:155: if (key >= 0 && key <= 9)
      000469 EB               [12] 1246 	mov	a,r3
      00046A 20 E7 2A         [24] 1247 	jb	acc.7,00119$
      00046D C3               [12] 1248 	clr	c
      00046E 74 09            [12] 1249 	mov	a,#0x09
      000470 9A               [12] 1250 	subb	a,r2
      000471 74 80            [12] 1251 	mov	a,#(0x00 ^ 0x80)
      000473 8B F0            [24] 1252 	mov	b,r3
      000475 63 F0 80         [24] 1253 	xrl	b,#0x80
      000478 95 F0            [12] 1254 	subb	a,b
      00047A 40 1B            [24] 1255 	jc	00119$
                                   1256 ;	main.c:156: num_bi[index++] = key;
      00047C AE*36            [24] 1257 	mov	r6,_main_index_65538_33
      00047E AF*37            [24] 1258 	mov	r7,(_main_index_65538_33 + 1)
      000480 05*36            [12] 1259 	inc	_main_index_65538_33
      000482 E4               [12] 1260 	clr	a
      000483 B5*36 02         [24] 1261 	cjne	a,_main_index_65538_33,00250$
      000486 05*37            [12] 1262 	inc	(_main_index_65538_33 + 1)
      000488                       1263 00250$:
      000488 EE               [12] 1264 	mov	a,r6
      000489 2E               [12] 1265 	add	a,r6
      00048A FE               [12] 1266 	mov	r6,a
      00048B EF               [12] 1267 	mov	a,r7
      00048C 33               [12] 1268 	rlc	a
      00048D FF               [12] 1269 	mov	r7,a
      00048E EE               [12] 1270 	mov	a,r6
      00048F 24r10            [12] 1271 	add	a,#_main_num_bi_65537_32
      000491 F8               [12] 1272 	mov	r0,a
      000492 A6 02            [24] 1273 	mov	@r0,ar2
      000494 08               [12] 1274 	inc	r0
      000495 A6 03            [24] 1275 	mov	@r0,ar3
      000497                       1276 00119$:
                                   1277 ;	main.c:157: if (index == 4) index = 0;
      000497 74 04            [12] 1278 	mov	a,#0x04
      000499 B5*36 06         [24] 1279 	cjne	a,_main_index_65538_33,00251$
      00049C E4               [12] 1280 	clr	a
      00049D B5*37 02         [24] 1281 	cjne	a,(_main_index_65538_33 + 1),00251$
      0004A0 80 02            [24] 1282 	sjmp	00252$
      0004A2                       1283 00251$:
      0004A2 80 05            [24] 1284 	sjmp	00126$
      0004A4                       1285 00252$:
      0004A4 E4               [12] 1286 	clr	a
      0004A5 F5*36            [12] 1287 	mov	_main_index_65538_33,a
      0004A7 F5*37            [12] 1288 	mov	(_main_index_65538_33 + 1),a
      0004A9                       1289 00126$:
                                   1290 ;	main.c:161: if (!isSetting && !setting_bi_time) {
      0004A9 ED               [12] 1291 	mov	a,r5
      0004AA 70 14            [24] 1292 	jnz	00129$
      0004AC EC               [12] 1293 	mov	a,r4
      0004AD 70 11            [24] 1294 	jnz	00129$
                                   1295 ;	main.c:162: run_clock(num);
      0004AF 90r00r08         [24] 1296 	mov	dptr,#_main_num_65537_32
      0004B2 75 F0 40         [24] 1297 	mov	b,#0x40
      0004B5 C0 05            [24] 1298 	push	ar5
      0004B7 C0 04            [24] 1299 	push	ar4
      0004B9 12r00r00         [24] 1300 	lcall	_run_clock
      0004BC D0 04            [24] 1301 	pop	ar4
      0004BE D0 05            [24] 1302 	pop	ar5
      0004C0                       1303 00129$:
                                   1304 ;	main.c:165: row++;
      0004C0 05*04            [12] 1305 	inc	_main_row_65537_32
      0004C2 E4               [12] 1306 	clr	a
      0004C3 B5*04 02         [24] 1307 	cjne	a,_main_row_65537_32,00255$
      0004C6 05*05            [12] 1308 	inc	(_main_row_65537_32 + 1)
      0004C8                       1309 00255$:
                                   1310 ;	main.c:166: if (count == 0x10) {	//用count從上往下掃 
      0004C8 74 10            [12] 1311 	mov	a,#0x10
      0004CA B5*06 06         [24] 1312 	cjne	a,_main_count_65537_32,00256$
      0004CD E4               [12] 1313 	clr	a
      0004CE B5*07 02         [24] 1314 	cjne	a,(_main_count_65537_32 + 1),00256$
      0004D1 80 02            [24] 1315 	sjmp	00257$
      0004D3                       1316 00256$:
      0004D3 80 0D            [24] 1317 	sjmp	00132$
      0004D5                       1318 00257$:
                                   1319 ;	main.c:167: count = 1;
      0004D5 75*06 01         [24] 1320 	mov	_main_count_65537_32,#0x01
                                   1321 ;	main.c:168: row   = 0;
      0004D8 E4               [12] 1322 	clr	a
      0004D9 F5*07            [12] 1323 	mov	(_main_count_65537_32 + 1),a
      0004DB F5*04            [12] 1324 	mov	_main_row_65537_32,a
      0004DD F5*05            [12] 1325 	mov	(_main_row_65537_32 + 1),a
                                   1326 ;	main.c:169: P1 = 0b11111111;
      0004DF 75 90 FF         [24] 1327 	mov	_P1,#0xff
      0004E2                       1328 00132$:
                                   1329 ;	main.c:172: if (setting_bi_time || isSetting)
      0004E2 EC               [12] 1330 	mov	a,r4
      0004E3 70 03            [24] 1331 	jnz	00136$
      0004E5 ED               [12] 1332 	mov	a,r5
      0004E6 60 6B            [24] 1333 	jz	00137$
      0004E8                       1334 00136$:
                                   1335 ;	main.c:173: if (isSetting)
      0004E8 ED               [12] 1336 	mov	a,r5
      0004E9 60 34            [24] 1337 	jz	00134$
                                   1338 ;	main.c:174: display(table, alpha, num, 1, flash_flag);
      0004EB 75*00r18         [24] 1339 	mov	_display_PARM_2,#_main_alpha_65537_32
      0004EE 75*01 00         [24] 1340 	mov	(_display_PARM_2 + 1),#0x00
      0004F1 75*02 40         [24] 1341 	mov	(_display_PARM_2 + 2),#0x40
      0004F4 75*03r08         [24] 1342 	mov	_display_PARM_3,#_main_num_65537_32
      0004F7 75*04 00         [24] 1343 	mov	(_display_PARM_3 + 1),#0x00
      0004FA 75*05 40         [24] 1344 	mov	(_display_PARM_3 + 2),#0x40
      0004FD 75*06 01         [24] 1345 	mov	_display_PARM_4,#0x01
      000500 85*38*07         [24] 1346 	mov	_display_PARM_5,_main_flash_flag_65538_33
      000503 85*39*08         [24] 1347 	mov	(_display_PARM_5 + 1),(_main_flash_flag_65538_33 + 1)
      000506 85*3A*09         [24] 1348 	mov	(_display_PARM_5 + 2),(_main_flash_flag_65538_33 + 2)
      000509 85*3B*0A         [24] 1349 	mov	(_display_PARM_5 + 3),(_main_flash_flag_65538_33 + 3)
      00050C 90r00r2E         [24] 1350 	mov	dptr,#_main_table_65537_32
      00050F 75 F0 40         [24] 1351 	mov	b,#0x40
      000512 C0 05            [24] 1352 	push	ar5
      000514 C0 04            [24] 1353 	push	ar4
      000516 12r01rB2         [24] 1354 	lcall	_display
      000519 D0 04            [24] 1355 	pop	ar4
      00051B D0 05            [24] 1356 	pop	ar5
      00051D 80 66            [24] 1357 	sjmp	00138$
      00051F                       1358 00134$:
                                   1359 ;	main.c:176: display(table, alpha, num_bi, 1, flash_flag);
      00051F 75*00r18         [24] 1360 	mov	_display_PARM_2,#_main_alpha_65537_32
      000522 75*01 00         [24] 1361 	mov	(_display_PARM_2 + 1),#0x00
      000525 75*02 40         [24] 1362 	mov	(_display_PARM_2 + 2),#0x40
      000528 75*03r10         [24] 1363 	mov	_display_PARM_3,#_main_num_bi_65537_32
      00052B 75*04 00         [24] 1364 	mov	(_display_PARM_3 + 1),#0x00
      00052E 75*05 40         [24] 1365 	mov	(_display_PARM_3 + 2),#0x40
      000531 75*06 01         [24] 1366 	mov	_display_PARM_4,#0x01
      000534 85*38*07         [24] 1367 	mov	_display_PARM_5,_main_flash_flag_65538_33
      000537 85*39*08         [24] 1368 	mov	(_display_PARM_5 + 1),(_main_flash_flag_65538_33 + 1)
      00053A 85*3A*09         [24] 1369 	mov	(_display_PARM_5 + 2),(_main_flash_flag_65538_33 + 2)
      00053D 85*3B*0A         [24] 1370 	mov	(_display_PARM_5 + 3),(_main_flash_flag_65538_33 + 3)
      000540 90r00r2E         [24] 1371 	mov	dptr,#_main_table_65537_32
      000543 75 F0 40         [24] 1372 	mov	b,#0x40
      000546 C0 05            [24] 1373 	push	ar5
      000548 C0 04            [24] 1374 	push	ar4
      00054A 12r01rB2         [24] 1375 	lcall	_display
      00054D D0 04            [24] 1376 	pop	ar4
      00054F D0 05            [24] 1377 	pop	ar5
      000551 80 32            [24] 1378 	sjmp	00138$
      000553                       1379 00137$:
                                   1380 ;	main.c:178: display(table, alpha, num, 0, flash_flag);
      000553 75*00r18         [24] 1381 	mov	_display_PARM_2,#_main_alpha_65537_32
      000556 75*01 00         [24] 1382 	mov	(_display_PARM_2 + 1),#0x00
      000559 75*02 40         [24] 1383 	mov	(_display_PARM_2 + 2),#0x40
      00055C 75*03r08         [24] 1384 	mov	_display_PARM_3,#_main_num_65537_32
      00055F 75*04 00         [24] 1385 	mov	(_display_PARM_3 + 1),#0x00
      000562 75*05 40         [24] 1386 	mov	(_display_PARM_3 + 2),#0x40
      000565 75*06 00         [24] 1387 	mov	_display_PARM_4,#0x00
      000568 85*38*07         [24] 1388 	mov	_display_PARM_5,_main_flash_flag_65538_33
      00056B 85*39*08         [24] 1389 	mov	(_display_PARM_5 + 1),(_main_flash_flag_65538_33 + 1)
      00056E 85*3A*09         [24] 1390 	mov	(_display_PARM_5 + 2),(_main_flash_flag_65538_33 + 2)
      000571 85*3B*0A         [24] 1391 	mov	(_display_PARM_5 + 3),(_main_flash_flag_65538_33 + 3)
      000574 90r00r2E         [24] 1392 	mov	dptr,#_main_table_65537_32
      000577 75 F0 40         [24] 1393 	mov	b,#0x40
      00057A C0 05            [24] 1394 	push	ar5
      00057C C0 04            [24] 1395 	push	ar4
      00057E 12r01rB2         [24] 1396 	lcall	_display
      000581 D0 04            [24] 1397 	pop	ar4
      000583 D0 05            [24] 1398 	pop	ar5
      000585                       1399 00138$:
                                   1400 ;	main.c:179: check_sound_trigger();
      000585 C0 05            [24] 1401 	push	ar5
      000587 C0 04            [24] 1402 	push	ar4
      000589 12r02rF7         [24] 1403 	lcall	_check_sound_trigger
      00058C D0 04            [24] 1404 	pop	ar4
      00058E D0 05            [24] 1405 	pop	ar5
                                   1406 ;	main.c:182: }
      000590 02r03r94         [24] 1407 	ljmp	00141$
                                   1408 	.area CSEG    (CODE)
                                   1409 	.area CONST   (CODE)
                                   1410 	.area XINIT   (CODE)
                                   1411 	.area CABS    (ABS,CODE)
